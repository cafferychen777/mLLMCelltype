[{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/01-introduction.html","id":"overview","dir":"Articles","previous_headings":"Introduction to mLLMCelltype","what":"Overview","title":"Introduction to mLLMCelltype","text":"mLLMCelltype iterative multi-LLM consensus framework cell type annotation single-cell RNA sequencing data. leveraging complementary strengths multiple large language models, framework significantly improves annotation accuracy providing transparent uncertainty quantification. package implements novel approach multiple large language models (LLMs) collaborate structured deliberation achieve accurate reliable cell type annotations single model provide alone.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/01-introduction.html","id":"background","dir":"Articles","previous_headings":"Introduction to mLLMCelltype","what":"Background","title":"Introduction to mLLMCelltype","text":"Cell type annotation critical step single-cell RNA sequencing (scRNA-seq) analysis. Traditional methods often rely reference datasets marker gene databases, can limited availability high-quality references complexity cell types across different tissues conditions. Large language models shown promising results cell type annotation leveraging extensive knowledge biological literature ability reason gene expression patterns. However, individual LLMs can produce hallucinations make errors due limitations training data reasoning capabilities. mLLMCelltype addresses challenges implementing consensus-based approach multiple LLMs collaborate provide reliable annotations.","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/01-introduction.html","id":"multi-llm-consensus-architecture","dir":"Articles","previous_headings":"Introduction to mLLMCelltype > Key Features","what":"Multi-LLM Consensus Architecture","title":"Introduction to mLLMCelltype","text":"mLLMCelltype harnesses collective intelligence diverse LLMs overcome single-model limitations biases. package currently supports wide range models: OpenAI GPT-4o/4.1 Anthropic Claude-3.7/3.5 Google Gemini-2.0/2.5 X.AI Grok-3 DeepSeek-V3 Alibaba Qwen2.5 Zhipu GLM-4 MiniMax Stepfun OpenRouter integrating multiple models different architectures training data, mLLMCelltype can achieve robust accurate annotations single model.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/01-introduction.html","id":"structured-deliberation-process","dir":"Articles","previous_headings":"Introduction to mLLMCelltype > Key Features","what":"Structured Deliberation Process","title":"Introduction to mLLMCelltype","text":"package enables LLMs share reasoning, evaluate evidence, refine annotations multiple rounds collaborative discussion. structured deliberation process includes: Initial independent annotation LLM Identification controversial clusters models disagree Structured discussion models share reasoning evaluate others’ arguments Consensus formation iterative refinement process mimics panel human experts might collaborate reach consensus difficult cases.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/01-introduction.html","id":"transparent-uncertainty-quantification","dir":"Articles","previous_headings":"Introduction to mLLMCelltype > Key Features","what":"Transparent Uncertainty Quantification","title":"Introduction to mLLMCelltype","text":"mLLMCelltype provides quantitative metrics identify ambiguous cell populations may require expert review: Consensus Proportion: Measures level agreement among LLMs Shannon Entropy: Quantifies uncertainty annotations metrics help researchers identify cell clusters high confidence annotations may require investigation.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/01-introduction.html","id":"other-advanced-features","dir":"Articles","previous_headings":"Introduction to mLLMCelltype > Key Features","what":"Other Advanced Features","title":"Introduction to mLLMCelltype","text":"Hallucination Reduction: Cross-model deliberation actively suppresses inaccurate unsupported predictions Robust Input Noise: Maintains high accuracy even imperfect marker gene lists Hierarchical Annotation Support: Optional extension multi-resolution analysis Reference Dataset Required: Performs accurate annotation without pre-training reference data Complete Reasoning Chains: Documents full deliberation process Seamless Integration: Works directly standard Scanpy/Seurat workflows Modular Design: Easily incorporate new LLMs become available","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/01-introduction.html","id":"applicable-scenarios","dir":"Articles","previous_headings":"Introduction to mLLMCelltype","what":"Applicable Scenarios","title":"Introduction to mLLMCelltype","text":"mLLMCelltype designed wide range single-cell RNA sequencing analysis scenarios: Novel tissue types reference datasets may limited Rare poorly characterized cell populations Complex tissues many similar cell types Integrative analysis across multiple datasets Quality control validate annotations methods","code":""},{"path":[]},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/01-introduction.html","id":"bug-fixes","dir":"Articles","previous_headings":"Introduction to mLLMCelltype > Latest Updates > v1.1.4 (2025-04-24)","what":"Bug Fixes","title":"Introduction to mLLMCelltype","text":"Fixed critical issue cluster index handling, now package strictly accepts 0-based indices (compatible Seurat) Fixed negative index (-1) issues occur processing CSV input files Added strict validation input cluster indices ensure start 0","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/01-introduction.html","id":"improvements","dir":"Articles","previous_headings":"Introduction to mLLMCelltype > Latest Updates > v1.1.4 (2025-04-24)","what":"Improvements","title":"Introduction to mLLMCelltype","text":"Removed automatic conversion logic 1-based 0-based indices Added input validation ensure cluster indices start 0 Updated code comments clarity complete list updates, please refer NEWS.md file.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/01-introduction.html","id":"getting-started","dir":"Articles","previous_headings":"Introduction to mLLMCelltype","what":"Getting Started","title":"Introduction to mLLMCelltype","text":"get started mLLMCelltype, please refer Installation Guide Quick Start Guide.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/01-introduction.html","id":"citation","dir":"Articles","previous_headings":"Introduction to mLLMCelltype","what":"Citation","title":"Introduction to mLLMCelltype","text":"use mLLMCelltype research, please cite:","code":"Yang, C., Zhang, X., & Chen, J. (2025). Large Language Model Consensus Substantially  Improves the Cell Type Annotation Accuracy for scRNA-seq Data. bioRxiv.  https://doi.org/10.1101/2025.04.10.647852"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/01-introduction.html","id":"next-steps","dir":"Articles","previous_headings":"Introduction to mLLMCelltype","what":"Next Steps","title":"Introduction to mLLMCelltype","text":"Installation Guide: Learn install configure mLLMCelltype Quick Start Guide: Get started basic usage examples Usage Tutorial: Explore detailed usage scenarios Consensus Annotation Principles: Understand technical principles","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"installation-guide","dir":"Articles","previous_headings":"","what":"Installation Guide","title":"Installation Guide","text":"guide provides detailed instructions installing configuring mLLMCelltype cell type annotation single-cell RNA sequencing data.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"system-requirements","dir":"Articles","previous_headings":"Installation Guide","what":"System Requirements","title":"Installation Guide","text":"installing mLLMCelltype, ensure system meets following requirements: R version: 4.0.0 higher Memory: least 8GB RAM recommended (large datasets) Operating System: Windows, macOS, Linux Internet Connection: Required API calls LLM providers","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"installation-from-github","dir":"Articles","previous_headings":"Installation Guide > Installing the R Package","what":"Installation from GitHub","title":"Installation Guide","text":"recommended way install mLLMCelltype directly GitHub using devtools package: install latest development version mLLMCelltype required dependencies.","code":"# Install devtools if not already installed if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") }  # Install mLLMCelltype devtools::install_github(\"cafferychen777/mLLMCelltype\", subdir = \"R\")"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"installation-from-a-local-source","dir":"Articles","previous_headings":"Installation Guide > Installing the R Package","what":"Installation from a Local Source","title":"Installation Guide","text":"downloaded source code need install local copy:","code":"# Assuming the package is in the current working directory devtools::install_local(\"path/to/mLLMCelltype/R\")"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"dependencies","dir":"Articles","previous_headings":"Installation Guide","what":"Dependencies","title":"Installation Guide","text":"mLLMCelltype depends several R packages automatically installed installation process. main dependencies include: dplyr: data manipulation httr: API requests jsonlite: JSON parsing R6: object-oriented programming digest: caching mechanisms magrittr: pipe operations visualization integration single-cell analysis workflows, following packages recommended required: Seurat: integration Seurat objects ggplot2: visualization SCpubr: publication-ready visualizations","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"api-keys-setup","dir":"Articles","previous_headings":"Installation Guide","what":"API Keys Setup","title":"Installation Guide","text":"mLLMCelltype requires API keys access different LLM providers. need obtain API keys least one supported providers:","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"obtaining-api-keys","dir":"Articles","previous_headings":"Installation Guide > API Keys Setup","what":"Obtaining API Keys","title":"Installation Guide","text":"Visit OpenAI Platform Create account log Navigate API keys section Create new API key Visit Anthropic Console Create account log Generate API key Visit Google AI Studio Create Google account log Generate API key Similar processes apply DeepSeek, Qwen, Zhipu, MiniMax, Stepfun, Grok Visit respective websites obtain API keys","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"setting-up-api-keys","dir":"Articles","previous_headings":"Installation Guide > API Keys Setup","what":"Setting Up API Keys","title":"Installation Guide","text":"three ways set API keys:","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"environment-variables","dir":"Articles","previous_headings":"Installation Guide > API Keys Setup > Setting Up API Keys","what":"1. Environment Variables","title":"Installation Guide","text":"Create .env file project directory API keys: load environment variables R script:","code":"# API Keys for different LLM models OPENAI_API_KEY=your-openai-key ANTHROPIC_API_KEY=your-anthropic-key GEMINI_API_KEY=your-gemini-key DEEPSEEK_API_KEY=your-deepseek-key QWEN_API_KEY=your-qwen-key ZHIPU_API_KEY=your-zhipu-key STEPFUN_API_KEY=your-stepfun-key MINIMAX_API_KEY=your-minimax-key GROK_API_KEY=your-grok-key OPENROUTER_API_KEY=your-openrouter-key library(dotenv) dotenv::load_dot_env()"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"direct-specification-in-function-calls","dir":"Articles","previous_headings":"Installation Guide > API Keys Setup > Setting Up API Keys","what":"2. Direct Specification in Function Calls","title":"Installation Guide","text":"can directly provide API keys function calls:","code":"library(mLLMCelltype)  results <- annotate_cell_types(   input = your_marker_data,   tissue_name = \"human PBMC\",   model = \"claude-3-7-sonnet-20250219\",   api_key = \"your-anthropic-key\",   top_gene_count = 10 )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"r-environment-variables","dir":"Articles","previous_headings":"Installation Guide > API Keys Setup > Setting Up API Keys","what":"3. R Environment Variables","title":"Installation Guide","text":"Set API keys R environment variables:","code":"Sys.setenv(OPENAI_API_KEY = \"your-openai-key\") Sys.setenv(ANTHROPIC_API_KEY = \"your-anthropic-key\") # Set other API keys as needed"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"verifying-installation","dir":"Articles","previous_headings":"Installation Guide","what":"Verifying Installation","title":"Installation Guide","text":"verify mLLMCelltype installed correctly API keys set properly:","code":"library(mLLMCelltype)  # Check if the package is loaded correctly packageVersion(\"mLLMCelltype\")  # Verify API key setup for a specific provider api_key <- get_api_key(\"anthropic\") if (!is.null(api_key) && api_key != \"\") {   cat(\"Anthropic API key is set up correctly\\n\") } else {   cat(\"Anthropic API key is not set up\\n\") }"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"package-installation-failures","dir":"Articles","previous_headings":"Installation Guide > Common Installation Issues","what":"Package Installation Failures","title":"Installation Guide","text":"encounter issues installation: Check R version: Ensure ’re using R 4.0.0 higher Update devtools: Run install.packages(\"devtools\") ensure latest version Check dependencies: dependencies might require system libraries Linux","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"api-connection-issues","dir":"Articles","previous_headings":"Installation Guide > Common Installation Issues","what":"API Connection Issues","title":"Installation Guide","text":"encounter issues connecting LLM APIs: Verify API keys: Ensure API keys correct expired Check internet connection: Ensure stable internet connection Proxy settings: ’re behind proxy, configure R use proxy settings","code":"# Example of setting proxy for httr httr::set_config(httr::use_proxy(url = \"proxy_url\", port = proxy_port))"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"memory-limitations","dir":"Articles","previous_headings":"Installation Guide > Common Installation Issues","what":"Memory Limitations","title":"Installation Guide","text":"large datasets, might encounter memory issues: Increase R memory limit: Use memory.limit(size = 16000) Windows increase available memory Process data batches: Consider processing large datasets smaller batches","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/02-installation.html","id":"next-steps","dir":"Articles","previous_headings":"Installation Guide","what":"Next Steps","title":"Installation Guide","text":"Now installed mLLMCelltype, can proceed : Getting Started: Learn basics using mLLMCelltype Usage Tutorial: Explore advanced usage scenarios Visualization Guide: Learn visualize results encounter issues covered guide, please open issue GitHub repository.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"getting-started-with-mllmcelltype","dir":"Articles","previous_headings":"","what":"Getting Started with mLLMCelltype","title":"Getting Started with mLLMCelltype","text":"guide provides quick introduction using mLLMCelltype cell type annotation single-cell RNA sequencing data. ’ll cover basic workflow, input data requirements, simple example get started.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"basic-workflow","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype","what":"Basic Workflow","title":"Getting Started with mLLMCelltype","text":"mLLMCelltype workflow consists main steps: Prepare marker gene data cluster Run annotation using one multiple LLMs Create consensus multiple model predictions (optional) Integrate results Seurat Scanpy object Visualize results uncertainty metrics","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"loading-the-package-and-setting-up-api-keys","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype","what":"Loading the Package and Setting Up API Keys","title":"Getting Started with mLLMCelltype","text":"First, load mLLMCelltype package:","code":"library(mLLMCelltype)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"setting-up-api-keys","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype > Loading the Package and Setting Up API Keys","what":"Setting Up API Keys","title":"Getting Started with mLLMCelltype","text":"using mLLMCelltype, need set API keys LLM providers plan use: can obtain API keys : - Anthropic: https://console.anthropic.com/keys - OpenAI: https://platform.openai.com/api-keys - Google (Gemini): https://ai.google.dev/ - OpenRouter: https://openrouter.ai/keys Alternatively, can provide API keys directly function calls:","code":"# Set API keys as environment variables Sys.setenv(ANTHROPIC_API_KEY = \"your-anthropic-api-key\")  # For Claude models Sys.setenv(OPENAI_API_KEY = \"your-openai-api-key\")        # For GPT models Sys.setenv(GEMINI_API_KEY = \"your-gemini-api-key\")        # For Gemini models Sys.setenv(OPENROUTER_API_KEY = \"your-openrouter-api-key\") # For OpenRouter models results <- annotate_cell_types(   input = markers,   tissue_name = \"human PBMC\",   model = \"claude-3-7-sonnet-20250219\",   api_key = \"your-anthropic-api-key\",  # Direct API key   top_gene_count = 10 )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"input-data-requirements","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype","what":"Input Data Requirements","title":"Getting Started with mLLMCelltype","text":"mLLMCelltype accepts marker gene data several formats:","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"data-frame-format","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype > Input Data Requirements","what":"1. Data Frame Format","title":"Getting Started with mLLMCelltype","text":"data frame following columns: - cluster: Cluster ID (must 0-based) - gene: Gene name/symbol - avg_log2FC similar metric: Log fold change - p_val_adj similar metric: Adjusted p-value Example:","code":"# Example marker data frame markers_df <- data.frame(   cluster = c(0, 0, 0, 1, 1, 1),   gene = c(\"CD3D\", \"CD3E\", \"CD2\", \"CD14\", \"LYZ\", \"CST3\"),   avg_log2FC = c(2.5, 2.3, 2.1, 3.1, 2.8, 2.5),   p_val_adj = c(0.001, 0.001, 0.002, 0.0001, 0.0002, 0.0005) )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"seurat-findmarkers-output","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype > Input Data Requirements","what":"2. Seurat FindMarkers Output","title":"Getting Started with mLLMCelltype","text":"can directly use output Seurat’s FindAllMarkers() function:","code":"# Assuming you have a Seurat object named 'seurat_obj' library(Seurat) all_markers <- FindAllMarkers(seurat_obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"csv-file-path","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype > Input Data Requirements","what":"3. CSV File Path","title":"Getting Started with mLLMCelltype","text":"path CSV file containing marker gene data:","code":"# Path to your CSV file markers_file <- \"path/to/markers.csv\""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"list-format","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype > Input Data Requirements","what":"4. List Format","title":"Getting Started with mLLMCelltype","text":"list element contains marker genes cluster:","code":"# Example marker list markers_list <- list(   \"0\" = c(\"CD3D\", \"CD3E\", \"CD2\", \"IL7R\", \"LTB\"),   \"1\" = c(\"CD14\", \"LYZ\", \"CST3\", \"MS4A7\", \"FCGR3A\") )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"function-parameters","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype","what":"Function Parameters","title":"Getting Started with mLLMCelltype","text":"annotate_cell_types function following parameters: Note: api_key set NA, function return generated prompt without making API call, useful reviewing prompt sending API.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"basic-usage-example","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype","what":"Basic Usage Example","title":"Getting Started with mLLMCelltype","text":"’s simple example using single LLM model annotation:","code":"# Example marker data markers <- data.frame(   cluster = c(0, 0, 0, 0, 0, 1, 1, 1, 1, 1),   gene = c(\"CD3D\", \"CD3E\", \"CD2\", \"IL7R\", \"LTB\", \"CD14\", \"LYZ\", \"CST3\", \"MS4A7\", \"FCGR3A\"),   avg_log2FC = c(2.5, 2.3, 2.1, 1.8, 1.7, 3.1, 2.8, 2.5, 2.2, 2.0),   p_val_adj = c(0.001, 0.001, 0.002, 0.003, 0.005, 0.0001, 0.0002, 0.0005, 0.001, 0.002) )  # Run annotation with a single model results <- annotate_cell_types(   input = markers,   tissue_name = \"human PBMC\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\"),   top_gene_count = 10,   debug = FALSE  # Set to TRUE for more detailed output )  # Print results print(results)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"example-output","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype > Basic Usage Example","what":"Example Output","title":"Getting Started with mLLMCelltype","text":"using single model like Claude, output character vector one annotation per cluster:","code":"> print(results) [1] \"0: T cells\"   \"1: Monocytes\""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"multi-model-consensus-example","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype","what":"Multi-Model Consensus Example","title":"Getting Started with mLLMCelltype","text":"reliable annotations, can use multiple models create consensus:","code":"# Define models to use models <- c(   \"claude-3-7-sonnet-20250219\",  # Anthropic   \"gpt-4o\",                      # OpenAI   \"gemini-1.5-pro\"               # Google )  # API keys for different providers api_keys <- list(   anthropic = Sys.getenv(\"ANTHROPIC_API_KEY\"),   openai = Sys.getenv(\"OPENAI_API_KEY\"),   gemini = Sys.getenv(\"GEMINI_API_KEY\") )  # Run annotation with multiple models results <- list() for (model in models) {   provider <- get_provider(model)   api_key <- api_keys[[provider]]    results[[model]] <- annotate_cell_types(     input = markers,     tissue_name = \"human PBMC\",     model = model,     api_key = api_key,     top_gene_count = 10   ) }  # Create consensus consensus_results <- interactive_consensus_annotation(   input = markers,   tissue_name = \"human PBMC\",   models = models,  # Use all the models defined above   api_keys = api_keys,   controversy_threshold = 0.7,   entropy_threshold = 1.0,   consensus_check_model = \"claude-3-7-sonnet-20250219\" )  # Print consensus results print_consensus_summary(consensus_results)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"consensus-output-example","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype > Multi-Model Consensus Example","what":"Consensus Output Example","title":"Getting Started with mLLMCelltype","text":"consensus results contain detailed information:","code":"> print_consensus_summary(consensus_results) Consensus Summary: ----------------- Total clusters: 2 Controversial clusters: 0 Consensus achieved for all clusters  Cluster 0:   Final annotation: T cells   Consensus proportion: 1.0   Entropy: 0.0   Model predictions:     - claude-3-7-sonnet-20250219: T cells     - gpt-4o: T cells     - gemini-1.5-pro: T cells  Cluster 1:   Final annotation: Monocytes   Consensus proportion: 1.0   Entropy: 0.0   Model predictions:     - claude-3-7-sonnet-20250219: Monocytes     - gpt-4o: Monocytes     - gemini-1.5-pro: Monocytes"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"integrating-with-seurat","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype","what":"Integrating with Seurat","title":"Getting Started with mLLMCelltype","text":"add annotations Seurat object:","code":"# Assuming you have a Seurat object named 'seurat_obj' and consensus results library(Seurat)  # Add consensus annotations to Seurat object seurat_obj$cell_type_consensus <- plyr::mapvalues(   x = as.character(Idents(seurat_obj)),   from = as.character(0:(length(consensus_results$final_annotations)-1)),   to = consensus_results$final_annotations )  # Extract consensus metrics from the consensus results # Note: These metrics are available in the consensus_results$initial_results$consensus_results consensus_metrics <- lapply(names(consensus_results$initial_results$consensus_results), function(cluster_id) {   metrics <- consensus_results$initial_results$consensus_results[[cluster_id]]   return(list(     cluster = cluster_id,     consensus_proportion = metrics$consensus_proportion,     entropy = metrics$entropy   )) })  # Convert to data frame for easier handling metrics_df <- do.call(rbind, lapply(consensus_metrics, data.frame))  # Add consensus proportion to Seurat object seurat_obj$consensus_proportion <- plyr::mapvalues(   x = as.character(Idents(seurat_obj)),   from = metrics_df$cluster,   to = metrics_df$consensus_proportion )  # Add entropy to Seurat object seurat_obj$entropy <- plyr::mapvalues(   x = as.character(Idents(seurat_obj)),   from = metrics_df$cluster,   to = metrics_df$entropy )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"basic-visualization","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype","what":"Basic Visualization","title":"Getting Started with mLLMCelltype","text":"’s simple visualization results using Seurat:","code":"# Plot UMAP with cell type annotations DimPlot(seurat_obj, group.by = \"cell_type_consensus\", label = TRUE, repel = TRUE) +   ggtitle(\"Cell Type Annotations\") +   theme(plot.title = element_text(hjust = 0.5))"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"understanding-the-output","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype","what":"Understanding the Output","title":"Getting Started with mLLMCelltype","text":"output annotate_cell_types() vector cell type annotations, element corresponds cluster. output interactive_consensus_annotation() list containing: final_annotations: Final consensus cell type annotations initial_results: Initial predictions model controversial_clusters: List clusters required discussion discussion_logs: Detailed logs discussion process session_id: Unique identifier annotation session","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"understanding-uncertainty-metrics","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype > Understanding the Output","what":"Understanding Uncertainty Metrics","title":"Getting Started with mLLMCelltype","text":"using consensus annotation, two key metrics help evaluate reliability annotations: Consensus Proportion: Ranges 0 1, indicating proportion models agree final annotation. Higher values indicate stronger agreement. Entropy: Measures uncertainty model predictions. Lower values indicate certainty. entropy 0 means models agree perfectly. Clusters low consensus proportion high entropy may require manual review.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"using-openrouter-free-models","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype","what":"Using OpenRouter Free Models","title":"Getting Started with mLLMCelltype","text":"don’t access paid API keys, can use OpenRouter’s free models: Available free models include: meta-llama/llama-4-maverick:free - Meta Llama 4 Maverick (256K context) nvidia/llama-3.1-nemotron-ultra-253b-v1:free - NVIDIA Nemotron Ultra 253B deepseek/deepseek-chat-v3-0324:free - DeepSeek Chat v3 microsoft/mai-ds-r1:free - Microsoft MAI-DS-R1 Free models don’t consume credits may limitations compared paid models.","code":"# Set OpenRouter API key Sys.setenv(OPENROUTER_API_KEY = \"your-openrouter-api-key\")  # Use a free model free_results <- annotate_cell_types(   input = markers,   tissue_name = \"human PBMC\",   model = \"meta-llama/llama-4-maverick:free\",  # Note the :free suffix   api_key = Sys.getenv(\"OPENROUTER_API_KEY\"),   top_gene_count = 10 )  # Print results print(free_results)"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"common-issues","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype > Troubleshooting","what":"Common Issues","title":"Getting Started with mLLMCelltype","text":"API Key Found: Solution: Ensure ’ve set correct API key environment variable provided directly function call. Rate Limiting: Solution: Wait minutes trying , reduce number API calls processing fewer clusters . Invalid Model Name: Solution: Check ’re using supported model name ’s spelled correctly. Network Issues: Solution: Check internet connection try . problem persists, API service might .","code":"Error: No auth credentials found Error: Rate limit exceeded Error: Unsupported model: [model_name] Error: Could not connect to API"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/03-getting-started.html","id":"next-steps","dir":"Articles","previous_headings":"Getting Started with mLLMCelltype","what":"Next Steps","title":"Getting Started with mLLMCelltype","text":"Now understand basics mLLMCelltype, can explore: Usage Tutorial: detailed usage examples Consensus Annotation Principles: Learn consensus mechanism Visualization Guide: Create publication-ready visualizations Advanced Features: Explore hierarchical annotation advanced features FAQ: Answers common questions encounter issues, check FAQ open issue GitHub repository.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"usage-tutorial","dir":"Articles","previous_headings":"","what":"Usage Tutorial","title":"Usage Tutorial","text":"tutorial provides detailed instructions using mLLMCelltype cell type annotation single-cell RNA sequencing data. ’ll cover various usage scenarios, parameter configurations, integration Seurat.","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"annotate_cell_types","dir":"Articles","previous_headings":"Usage Tutorial > Comprehensive Function Parameters","what":"annotate_cell_types()","title":"Usage Tutorial","text":"main function cell type annotation single model:","code":"library(mLLMCelltype)  results <- annotate_cell_types(   input,                # Marker gene data (data frame, list, or file path)   tissue_name,          # Tissue name (e.g., \"human PBMC\", \"mouse brain\")   model,                # LLM model to use   api_key = NA,         # API key (if not set in environment, NA returns prompt only)   top_gene_count = 10,  # Number of top genes per cluster to use   debug = FALSE         # Whether to print debugging information )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"interactive_consensus_annotation","dir":"Articles","previous_headings":"Usage Tutorial > Comprehensive Function Parameters","what":"interactive_consensus_annotation()","title":"Usage Tutorial","text":"Function creating consensus annotations multiple models interactive discussion:","code":"consensus_results <- interactive_consensus_annotation(   input,                # Original marker gene data (Seurat FindAllMarkers result or list of genes)   tissue_name = NULL,   # Optional tissue name   models = c(\"claude-3-7-sonnet-20250219\", \"gpt-4o\", \"gemini-1.5-pro\"),  # Models to use   api_keys,             # Named list of API keys   top_gene_count = 10,  # Number of top genes to use   controversy_threshold = 0.7,  # Threshold for identifying controversial clusters   entropy_threshold = 1.0,  # Entropy threshold for controversial clusters   max_discussion_rounds = 3,  # Maximum discussion rounds   consensus_check_model = NULL,  # Model to use for consensus checking   log_dir = \"logs\",     # Directory for logs   cache_dir = \"consensus_cache\",  # Directory for cache   use_cache = TRUE      # Whether to use cache )"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"scenario-1-basic-annotation-with-a-single-model","dir":"Articles","previous_headings":"Usage Tutorial > Detailed Usage Scenarios","what":"Scenario 1: Basic Annotation with a Single Model","title":"Usage Tutorial","text":"quick exploration API usage concern:","code":"# Load example data library(Seurat) data(\"pbmc_small\")  # Find markers pbmc_markers <- FindAllMarkers(pbmc_small, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)  # Run annotation with a single model results <- annotate_cell_types(   input = pbmc_markers,   tissue_name = \"human PBMC\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\"),   top_gene_count = 10 )  # Add annotations to Seurat object pbmc_small$cell_type_claude <- plyr::mapvalues(   x = as.character(Idents(pbmc_small)),   from = as.character(0:(length(results)-1)),   to = results )  # Visualize DimPlot(pbmc_small, group.by = \"cell_type_claude\", label = TRUE)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"scenario-2-multi-model-consensus-for-high-accuracy","dir":"Articles","previous_headings":"Usage Tutorial > Detailed Usage Scenarios","what":"Scenario 2: Multi-Model Consensus for High Accuracy","title":"Usage Tutorial","text":"publication-quality annotations uncertainty quantification:","code":"# Define multiple models to use models <- c(   \"claude-3-7-sonnet-20250219\",  # Anthropic   \"gpt-4o\",                      # OpenAI   \"gemini-1.5-pro\",              # Google   \"grok-3\"                       # X.AI )  # API keys for different providers api_keys <- list(   anthropic = Sys.getenv(\"ANTHROPIC_API_KEY\"),   openai = Sys.getenv(\"OPENAI_API_KEY\"),   gemini = Sys.getenv(\"GEMINI_API_KEY\"),   grok = Sys.getenv(\"GROK_API_KEY\") )  # Run annotation with multiple models results <- list() for (model in models) {   provider <- get_provider(model)   api_key <- api_keys[[provider]]    results[[model]] <- annotate_cell_types(     input = pbmc_markers,     tissue_name = \"human PBMC\",     model = model,     api_key = api_key,     top_gene_count = 10   ) }  # Create consensus consensus_results <- interactive_consensus_annotation(   input = pbmc_markers,   tissue_name = \"human PBMC\",   models = models,  # Use all the models defined above   api_keys = api_keys,   controversy_threshold = 0.7,   entropy_threshold = 1.0,   consensus_check_model = \"claude-3-7-sonnet-20250219\" )  # View consensus results # You can access the final annotations with consensus_results$final_annotations  # Add consensus annotations and metrics to Seurat object pbmc_small$cell_type_consensus <- plyr::mapvalues(   x = as.character(Idents(pbmc_small)),   from = as.character(0:(length(consensus_results$final_annotations)-1)),   to = consensus_results$final_annotations )  # Extract consensus metrics from the consensus results consensus_metrics <- lapply(names(consensus_results$initial_results$consensus_results), function(cluster_id) {   metrics <- consensus_results$initial_results$consensus_results[[cluster_id]]   return(list(     cluster = cluster_id,     consensus_proportion = metrics$consensus_proportion,     entropy = metrics$entropy   )) })  # Convert to data frame for easier handling metrics_df <- do.call(rbind, lapply(consensus_metrics, data.frame))  # Add consensus proportion to Seurat object pbmc_small$consensus_proportion <- plyr::mapvalues(   x = as.character(Idents(pbmc_small)),   from = metrics_df$cluster,   to = metrics_df$consensus_proportion )  # Add entropy to Seurat object pbmc_small$shannon_entropy <- plyr::mapvalues(   x = as.character(Idents(pbmc_small)),   from = metrics_df$cluster,   to = metrics_df$entropy )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"scenario-2b-using-free-openrouter-models","dir":"Articles","previous_headings":"Usage Tutorial > Detailed Usage Scenarios","what":"Scenario 2b: Using Free OpenRouter Models","title":"Usage Tutorial","text":"users limited API credits budget constraints:","code":"# Set OpenRouter API key openrouter_api_key <- Sys.getenv(\"OPENROUTER_API_KEY\")  # Define free OpenRouter models to use free_models <- c(   \"meta-llama/llama-4-maverick:free\",                # Meta Llama 4 Maverick (free)   \"nvidia/llama-3.1-nemotron-ultra-253b-v1:free\",    # NVIDIA Nemotron Ultra 253B (free)   \"deepseek/deepseek-chat-v3-0324:free\",             # DeepSeek Chat v3 (free)   \"microsoft/mai-ds-r1:free\"                         # Microsoft MAI-DS-R1 (free) )  # Run annotation with free OpenRouter models free_results <- list() for (model in free_models) {   free_results[[model]] <- annotate_cell_types(     input = pbmc_markers,     tissue_name = \"human PBMC\",     model = model,  # OpenRouter models are automatically detected by format: 'provider/model-name:free'     api_key = openrouter_api_key,     top_gene_count = 10   ) }  # Create consensus with free models free_consensus_results <- interactive_consensus_annotation(   input = pbmc_markers,   tissue_name = \"human PBMC\",   models = free_models,  # Use all the free models defined above   api_keys = list(\"openrouter\" = openrouter_api_key),   controversy_threshold = 0.7,   entropy_threshold = 1.0,   consensus_check_model = \"meta-llama/llama-4-maverick:free\"  # Use a free model for consensus checking )  # View free model consensus results # You can access the final annotations with free_consensus_results$final_annotations  # Add free model consensus annotations to Seurat object pbmc_small$free_model_consensus <- plyr::mapvalues(   x = as.character(Idents(pbmc_small)),   from = as.character(0:(length(free_consensus_results$final_annotations)-1)),   to = free_consensus_results$final_annotations )  # Compare paid vs. free model results comparison <- data.frame(   cluster = as.character(0:(length(consensus_results$final_annotations)-1)),   paid_models = consensus_results$final_annotations,   free_models = free_consensus_results$final_annotations,   agreement = consensus_results$final_annotations == free_consensus_results$final_annotations ) print(comparison)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"scenario-3-working-with-csv-files","dir":"Articles","previous_headings":"Usage Tutorial > Detailed Usage Scenarios","what":"Scenario 3: Working with CSV Files","title":"Usage Tutorial","text":"users prefer working files:","code":"# Save markers to CSV write.csv(pbmc_markers, \"pbmc_markers.csv\", row.names = FALSE)  # Run annotation using the CSV file results <- annotate_cell_types(   input = \"pbmc_markers.csv\",   tissue_name = \"human PBMC\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\") )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"scenario-4-custom-caching","dir":"Articles","previous_headings":"Usage Tutorial > Detailed Usage Scenarios","what":"Scenario 4: Custom Caching","title":"Usage Tutorial","text":"better control caching behavior:","code":"# Note: The annotate_cell_types function does not have built-in caching. # If you need caching, you can implement it separately.  # Run annotation results <- annotate_cell_types(   input = pbmc_markers,   tissue_name = \"human PBMC\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\"),   top_gene_count = 10,   debug = FALSE )  # If you need custom caching, you can implement it using your own cache manager # This is just a conceptual example and not part of the actual package # cache_manager <- YourCacheManager$new(cache_dir = \"path/to/cache\") # cache_manager$clear_cache()"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"model-selection-guide","dir":"Articles","previous_headings":"Usage Tutorial","what":"Model Selection Guide","title":"Usage Tutorial","text":"mLLMCelltype supports wide range LLM models. ’s guide help choose:","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"high-performance-models","dir":"Articles","previous_headings":"Usage Tutorial > Model Selection Guide","what":"High Performance Models","title":"Usage Tutorial","text":"accurate annotations: Anthropic Claude 3.7 Sonnet (claude-3-7-sonnet-20250219): Excellent biological knowledge, best discussion OpenAI GPT-4o (gpt-4o): Strong overall performance, good biological knowledge Google Gemini 1.5 Pro (gemini-1.5-pro): Good performance detailed reasoning","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"balanced-performancecost-models","dir":"Articles","previous_headings":"Usage Tutorial > Model Selection Guide","what":"Balanced Performance/Cost Models","title":"Usage Tutorial","text":"good results lower API costs: Anthropic Claude 3.5 Sonnet (claude-3-5-sonnet-20240620): Good balance performance cost X.AI Grok-3 (grok-3): Competitive performance lower cost DeepSeek V3 (deepseek-v3): Good performance specialized tissues","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"economy-models","dir":"Articles","previous_headings":"Usage Tutorial > Model Selection Guide","what":"Economy Models","title":"Usage Tutorial","text":"preliminary exploration large datasets: Qwen 2.5 (qwen-max-2025-01-25): Good performance cost Zhipu GLM-4 (glm-4): Economical option decent performance MiniMax (minimax): Cost-effective initial exploration","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"free-models-via-openrouter","dir":"Articles","previous_headings":"Usage Tutorial > Model Selection Guide","what":"Free Models via OpenRouter","title":"Usage Tutorial","text":"users limited API credits budget constraints: Meta Llama 4 Maverick (meta-llama/llama-4-maverick:free): Free model 256K context window NVIDIA Nemotron Ultra 253B (nvidia/llama-3.1-nemotron-ultra-253b-v1:free): Free 253B parameter model DeepSeek Chat v3 (deepseek/deepseek-chat-v3-0324:free): Free model 163K context window Microsoft MAI-DS-R1 (microsoft/mai-ds-r1:free): Free model 163K context window free models accessed OpenRouter don’t consume credits, may limitations compared paid models. Use :free suffix model name access .","code":"# Example of using a free model via OpenRouter # First, set your OpenRouter API key Sys.setenv(OPENROUTER_API_KEY = \"your-openrouter-api-key\")  # Then use a free model with the :free suffix free_model_results <- annotate_cell_types(   input = pbmc_markers,   tissue_name = \"human PBMC\",   model = \"meta-llama/llama-4-maverick:free\",  # Note the :free suffix   api_key = Sys.getenv(\"OPENROUTER_API_KEY\")   # No need to specify provider - it's automatically detected from the model name format )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"integration-with-seurat-workflow","dir":"Articles","previous_headings":"Usage Tutorial","what":"Integration with Seurat Workflow","title":"Usage Tutorial","text":"’s complete example integrating mLLMCelltype Seurat workflow:","code":"library(Seurat) library(mLLMCelltype) library(ggplot2)  # Load data data(\"pbmc_small\")  # Standard Seurat preprocessing pbmc_small <- NormalizeData(pbmc_small) pbmc_small <- FindVariableFeatures(pbmc_small) pbmc_small <- ScaleData(pbmc_small) pbmc_small <- RunPCA(pbmc_small) pbmc_small <- FindNeighbors(pbmc_small) pbmc_small <- FindClusters(pbmc_small, resolution = 0.5) pbmc_small <- RunUMAP(pbmc_small, dims = 1:10)  # Find markers for each cluster pbmc_markers <- FindAllMarkers(pbmc_small, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)  # Define models to use models <- c(   \"claude-3-7-sonnet-20250219\",   \"gpt-4o\",   \"gemini-1.5-pro\" )  # API keys api_keys <- list(   anthropic = Sys.getenv(\"ANTHROPIC_API_KEY\"),   openai = Sys.getenv(\"OPENAI_API_KEY\"),   gemini = Sys.getenv(\"GEMINI_API_KEY\") )  # Run annotation with multiple models results <- list() for (model in models) {   provider <- get_provider(model)   api_key <- api_keys[[provider]]    results[[model]] <- annotate_cell_types(     input = pbmc_markers,     tissue_name = \"human PBMC\",     model = model,     api_key = api_key,     top_gene_count = 10   )    # Add individual model results to Seurat object   column_name <- paste0(\"cell_type_\", gsub(\"[^a-zA-Z0-9]\", \"_\", model))   pbmc_small[[column_name]] <- plyr::mapvalues(     x = as.character(Idents(pbmc_small)),     from = as.character(0:(length(results[[model]])-1)),     to = results[[model]]   ) }  # Create consensus consensus_results <- interactive_consensus_annotation(   input = pbmc_markers,   tissue_name = \"human PBMC\",   models = models,  # Use all the models defined above   api_keys = api_keys,   controversy_threshold = 0.7,   entropy_threshold = 1.0,   consensus_check_model = \"claude-3-7-sonnet-20250219\" )  # Add consensus results to Seurat object pbmc_small$cell_type_consensus <- plyr::mapvalues(   x = as.character(Idents(pbmc_small)),   from = as.character(0:(length(consensus_results$final_annotations)-1)),   to = consensus_results$final_annotations )  # Extract consensus metrics from the consensus results consensus_metrics <- lapply(names(consensus_results$initial_results$consensus_results), function(cluster_id) {   metrics <- consensus_results$initial_results$consensus_results[[cluster_id]]   return(list(     cluster = cluster_id,     consensus_proportion = metrics$consensus_proportion,     entropy = metrics$entropy   )) })  # Convert to data frame for easier handling metrics_df <- do.call(rbind, lapply(consensus_metrics, data.frame))  # Add consensus proportion to Seurat object pbmc_small$consensus_proportion <- as.numeric(plyr::mapvalues(   x = as.character(Idents(pbmc_small)),   from = metrics_df$cluster,   to = metrics_df$consensus_proportion ))  # Add entropy to Seurat object pbmc_small$shannon_entropy <- as.numeric(plyr::mapvalues(   x = as.character(Idents(pbmc_small)),   from = metrics_df$cluster,   to = metrics_df$entropy ))  # Visualize results p1 <- DimPlot(pbmc_small, group.by = \"cell_type_consensus\", label = TRUE, repel = TRUE) +   ggtitle(\"Cell Type Annotations\") +   theme(plot.title = element_text(hjust = 0.5))  p2 <- FeaturePlot(pbmc_small, features = \"consensus_proportion\", cols = c(\"yellow\", \"green\", \"blue\")) +   ggtitle(\"Consensus Proportion\") +   theme(plot.title = element_text(hjust = 0.5))  p3 <- FeaturePlot(pbmc_small, features = \"shannon_entropy\", cols = c(\"red\", \"orange\")) +   ggtitle(\"Shannon Entropy\") +   theme(plot.title = element_text(hjust = 0.5))  # Combine plots p1 | p2 | p3"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"adjusting-top_gene_count","dir":"Articles","previous_headings":"Usage Tutorial > Advanced Parameter Tuning","what":"Adjusting top_gene_count","title":"Usage Tutorial","text":"top_gene_count parameter controls many top marker genes per cluster used annotation:","code":"# Using more genes (better for well-characterized tissues) results_more_genes <- annotate_cell_types(   input = pbmc_markers,   tissue_name = \"human PBMC\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\"),   top_gene_count = 20  # Using more genes )  # Using fewer genes (better for noisy data) results_fewer_genes <- annotate_cell_types(   input = pbmc_markers,   tissue_name = \"human PBMC\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\"),   top_gene_count = 5   # Using fewer genes )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"adjusting-controversy_threshold","dir":"Articles","previous_headings":"Usage Tutorial > Advanced Parameter Tuning","what":"Adjusting controversy_threshold","title":"Usage Tutorial","text":"controversy_threshold parameter interactive_consensus_annotation function controls clusters considered controversial require discussion:","code":"# Example of using interactive_consensus_annotation with different controversy thresholds # Lower threshold (more clusters will be discussed) consensus_results_low_threshold <- interactive_consensus_annotation(   input = pbmc_markers,   tissue_name = \"human PBMC\",   models = c(\"claude-3-7-sonnet-20250219\", \"gpt-4o\", \"gemini-2.0-flash\"),   api_keys = list(     \"anthropic\" = Sys.getenv(\"ANTHROPIC_API_KEY\"),     \"openai\" = Sys.getenv(\"OPENAI_API_KEY\"),     \"gemini\" = Sys.getenv(\"GEMINI_API_KEY\")   ),   controversy_threshold = 0.3  # Lower threshold - more clusters will be discussed )  # Higher threshold (fewer clusters will be discussed) consensus_results_high_threshold <- interactive_consensus_annotation(   input = pbmc_markers,   tissue_name = \"human PBMC\",   models = c(\"claude-3-7-sonnet-20250219\", \"gpt-4o\", \"gemini-2.0-flash\"),   api_keys = list(     \"anthropic\" = Sys.getenv(\"ANTHROPIC_API_KEY\"),     \"openai\" = Sys.getenv(\"OPENAI_API_KEY\"),     \"gemini\" = Sys.getenv(\"GEMINI_API_KEY\")   ),   controversy_threshold = 0.7  # Higher threshold - fewer clusters will be discussed )"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"api-rate-limits-and-costs","dir":"Articles","previous_headings":"Usage Tutorial > Performance Considerations","what":"API Rate Limits and Costs","title":"Usage Tutorial","text":"Different LLM providers different rate limits pricing: OpenAI: Higher rate limits can expensive Anthropic: Good balance rate limits cost Google: Competitive pricing good rate limits Others: Generally lower cost may stricter rate limits manage costs rate limits: Use caching avoid redundant API calls Start single model exploration Use economical models initial testing Reserve multi-model consensus final analysis","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"execution-time","dir":"Articles","previous_headings":"Usage Tutorial > Performance Considerations","what":"Execution Time","title":"Usage Tutorial","text":"Typical execution times: Single model annotation: 5-30 seconds per cluster Multi-model consensus: 1-5 minutes typical dataset Discussion process: Additional 1-3 minutes per controversial cluster improve performance: Use smaller top_gene_count faster execution Enable caching reuse results Use higher controversy_threshold reduce number clusters require discussion","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/04-usage-tutorial.html","id":"next-steps","dir":"Articles","previous_headings":"Usage Tutorial","what":"Next Steps","title":"Usage Tutorial","text":"Now understand detailed usage mLLMCelltype, can explore: Consensus Annotation Principles: Learn technical principles Visualization Guide: Create publication-ready visualizations FAQ: Find answers common questions Advanced Features: Explore hierarchical annotation advanced features","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"consensus-annotation-principles","dir":"Articles","previous_headings":"","what":"Consensus Annotation Principles","title":"Consensus Annotation Principles","text":"article explains technical principles behind mLLMCelltype’s consensus annotation approach. Understanding principles help make better use package interpret results effectively.","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"why-multiple-models","dir":"Articles","previous_headings":"Consensus Annotation Principles > The Multi-LLM Consensus Architecture","what":"Why Multiple Models?","title":"Consensus Annotation Principles","text":"Single large language models (LLMs) can produce impressive results cell type annotation, also limitations: Knowledge gaps: single model perfect knowledge cell types across tissues Hallucinations: LLMs can sometimes generate plausible-sounding incorrect annotations Biases: model biases based training data architecture Inconsistency: model may give different answers question multi-LLM consensus approach addresses limitations leveraging complementary strengths different models. similar panel experts might collaborate reach reliable conclusion single expert provide alone.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"model-diversity","dir":"Articles","previous_headings":"Consensus Annotation Principles > The Multi-LLM Consensus Architecture","what":"Model Diversity","title":"Consensus Annotation Principles","text":"mLLMCelltype deliberately incorporates models different architectures training data: Anthropic Claude models: Known careful reasoning biological knowledge OpenAI GPT models: Strong general knowledge pattern recognition Google Gemini models: Good integrating information multiple sources X.AI Grok models: Newer architecture different training approach models: Provide additional diversity reasoning approaches diversity crucial consensus mechanism work effectively. Models different “perspectives” can catch ’s errors provide complementary insights.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"the-structured-deliberation-process","dir":"Articles","previous_headings":"Consensus Annotation Principles","what":"The Structured Deliberation Process","title":"Consensus Annotation Principles","text":"consensus formation mLLMCelltype follows structured deliberation process:","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"initial-independent-annotation","dir":"Articles","previous_headings":"Consensus Annotation Principles > The Structured Deliberation Process","what":"1. Initial Independent Annotation","title":"Consensus Annotation Principles","text":"model independently annotates cell clusters based marker genes: step ensures model forms opinion without influenced others, similar jurors might form initial opinions deliberation.","code":"# Conceptual representation of the initial annotation process initial_results <- list() for (model in models) {   initial_results[[model]] <- annotate_cell_types(     input = marker_data,     tissue_name = tissue_name,     model = model,     api_key = api_keys[[get_provider(model)]]   ) }"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"identification-of-controversial-clusters","dir":"Articles","previous_headings":"Consensus Annotation Principles > The Structured Deliberation Process","what":"2. Identification of Controversial Clusters","title":"Consensus Annotation Principles","text":"system identifies clusters significant disagreement among models: cluster considered “controversial” proportion models agreeing common annotation certain threshold (default: 0.5). means less half models agree cell type, cluster requires discussion.","code":"# Conceptual representation of controversial cluster identification controversial_clusters <- identify_controversial_clusters(   initial_results,   threshold = discussion_threshold )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"structured-discussion-for-controversial-clusters","dir":"Articles","previous_headings":"Consensus Annotation Principles > The Structured Deliberation Process","what":"3. Structured Discussion for Controversial Clusters","title":"Consensus Annotation Principles","text":"controversial clusters, system initiates structured discussion process: discussion follows specific format: Initial positions: model’s initial annotation reasoning presented Evidence evaluation: discussion model evaluates evidence proposed cell type Counter-arguments: Potential weaknesses argument identified Synthesis: discussion model synthesizes arguments reach conclusion structured approach mimics human experts might deliberate difficult case, considering multiple perspectives critically evaluating evidence.","code":"# Conceptual representation of the discussion process discussion_results <- facilitate_cluster_discussion(   controversial_clusters,   initial_results,   marker_data,   tissue_name,   discussion_model,   api_key )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"final-consensus-formation","dir":"Articles","previous_headings":"Consensus Annotation Principles > The Structured Deliberation Process","what":"4. Final Consensus Formation","title":"Consensus Annotation Principles","text":"discussion, system forms final consensus clusters: non-controversial clusters, common annotation among initial results used. controversial clusters, result structured discussion used.","code":"# Conceptual representation of consensus formation final_annotations <- combine_results(   initial_results,   discussion_results,   controversial_clusters )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"uncertainty-quantification","dir":"Articles","previous_headings":"Consensus Annotation Principles","what":"Uncertainty Quantification","title":"Consensus Annotation Principles","text":"key feature mLLMCelltype transparent uncertainty quantification:","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"consensus-proportion","dir":"Articles","previous_headings":"Consensus Annotation Principles > Uncertainty Quantification","what":"Consensus Proportion","title":"Consensus Annotation Principles","text":"consensus proportion measures level agreement among models: metric ranges 0 1: - 1.0: Perfect agreement (models agree) - 0.5: Moderate agreement (half models agree) - < 0.5: Low agreement (less half models agree) consensus proportion helps identify annotations reliable might require investigation.","code":"# Conceptual calculation of consensus proportion consensus_proportion <- sapply(clusters, function(cluster) {   annotations <- sapply(models, function(model) initial_results[[model]][cluster])   most_common <- names(which.max(table(annotations)))   sum(annotations == most_common) / length(annotations) })"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"shannon-entropy","dir":"Articles","previous_headings":"Consensus Annotation Principles > Uncertainty Quantification","what":"Shannon Entropy","title":"Consensus Annotation Principles","text":"Shannon entropy quantifies uncertainty annotations: Shannon entropy measure information theory: - 0: uncertainty (models give answer) - Higher values: uncertainty (models give diverse answers) Unlike consensus proportion, Shannon entropy captures full distribution annotations, just common one. makes particularly useful identifying clusters high uncertainty.","code":"# Conceptual calculation of Shannon entropy shannon_entropy <- sapply(clusters, function(cluster) {   annotations <- sapply(models, function(model) initial_results[[model]][cluster])   p <- table(annotations) / length(annotations)   -sum(p * log2(p)) })"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"hallucination-reduction-mechanisms","dir":"Articles","previous_headings":"Consensus Annotation Principles","what":"Hallucination Reduction Mechanisms","title":"Consensus Annotation Principles","text":"mLLMCelltype incorporates several mechanisms reduce hallucinations:","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"cross-model-verification","dir":"Articles","previous_headings":"Consensus Annotation Principles > Hallucination Reduction Mechanisms","what":"Cross-Model Verification","title":"Consensus Annotation Principles","text":"requiring multiple independent models agree, system naturally filters many hallucinations. hallucinated annotation one model unlikely independently hallucinated models.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"evidence-based-reasoning","dir":"Articles","previous_headings":"Consensus Annotation Principles > Hallucination Reduction Mechanisms","what":"Evidence-Based Reasoning","title":"Consensus Annotation Principles","text":"structured discussion process explicitly requires models ground annotations marker gene evidence. reduces likelihood hallucinations aren’t supported data.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"critical-evaluation","dir":"Articles","previous_headings":"Consensus Annotation Principles > Hallucination Reduction Mechanisms","what":"Critical Evaluation","title":"Consensus Annotation Principles","text":"discussion process, models critically evaluate ’s reasoning. helps identify correct potential hallucinations reasoning errors.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"robustness-to-input-noise","dir":"Articles","previous_headings":"Consensus Annotation Principles","what":"Robustness to Input Noise","title":"Consensus Annotation Principles","text":"mLLMCelltype designed robust noise input data:","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"collective-error-correction","dir":"Articles","previous_headings":"Consensus Annotation Principles > Robustness to Input Noise","what":"Collective Error Correction","title":"Consensus Annotation Principles","text":"Even marker genes noisy misleading, consensus approach can still reach correct conclusion enough models can identify true signal data.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"focus-on-strong-signals","dir":"Articles","previous_headings":"Consensus Annotation Principles > Robustness to Input Noise","what":"Focus on Strong Signals","title":"Consensus Annotation Principles","text":"using top_gene_count parameter, system focuses strongest marker genes, less likely noise.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"uncertainty-flagging","dir":"Articles","previous_headings":"Consensus Annotation Principles > Robustness to Input Noise","what":"Uncertainty Flagging","title":"Consensus Annotation Principles","text":"input data noisy make reliable annotation, system show low consensus proportion high Shannon entropy, flagging cluster human review.","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"prompt-engineering","dir":"Articles","previous_headings":"Consensus Annotation Principles > Technical Implementation Details","what":"Prompt Engineering","title":"Consensus Annotation Principles","text":"prompts used mLLMCelltype carefully designed : Structure reasoning process: Guide models step--step analysis Enforce evidence-based reasoning: Require models cite specific marker genes Encourage critical thinking: Ask models consider alternative explanations Standardize output format: Ensure consistent, parseable responses ’s simplified example annotation prompt structure:","code":"You are an expert in single-cell RNA sequencing analysis.  TASK: Identify the cell type for a cluster based on its marker genes.  MARKER GENES: [List of marker genes with fold changes and p-values]  TISSUE: [Tissue name]  STEPS: 1. Analyze the marker genes and their expression levels 2. Identify key cell type-specific markers 3. Consider multiple possible cell types 4. Determine the most likely cell type based on the evidence 5. Provide your reasoning  OUTPUT FORMAT: Cell Type: [Your answer] Reasoning: [Your step-by-step reasoning] Confidence: [High/Medium/Low]"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"discussion-orchestration","dir":"Articles","previous_headings":"Consensus Annotation Principles > Technical Implementation Details","what":"Discussion Orchestration","title":"Consensus Annotation Principles","text":"discussion process orchestrated single “discussion model” (typically Claude) : Presents model’s initial annotation reasoning Evaluates evidence proposed cell type Identifies potential weaknesses argument Synthesizes arguments reach conclusion approach allows coherent discussion still incorporating diverse perspectives multiple models.","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"vs--single-llm-annotation","dir":"Articles","previous_headings":"Consensus Annotation Principles > Comparison with Other Approaches","what":"vs. Single LLM Annotation","title":"Consensus Annotation Principles","text":"Compared using single LLM: - Advantages: Higher accuracy, uncertainty quantification, reduced hallucinations - Disadvantages: Higher computational cost, complex implementation, requires multiple API keys","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"vs--traditional-annotation-methods","dir":"Articles","previous_headings":"Consensus Annotation Principles > Comparison with Other Approaches","what":"vs. Traditional Annotation Methods","title":"Consensus Annotation Principles","text":"Compared traditional methods (e.g., reference-based, marker-based): - Advantages: reference dataset required, flexible, captures rare cell types, provides reasoning - Disadvantages: Depends LLM knowledge, potentially higher cost, requires internet connection","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"vs--human-expert-annotation","dir":"Articles","previous_headings":"Consensus Annotation Principles > Comparison with Other Approaches","what":"vs. Human Expert Annotation","title":"Consensus Annotation Principles","text":"Compared human expert annotation: - Advantages: Faster, scalable, consistent methodology, transparent reasoning - Disadvantages: May miss novel cell types literature, lacks domain-specific expertise specialized tissues","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"practical-implications","dir":"Articles","previous_headings":"Consensus Annotation Principles","what":"Practical Implications","title":"Consensus Annotation Principles","text":"Understanding principles several practical implications using mLLMCelltype: Model selection matters: Including diverse, high-quality models improves consensus Uncertainty metrics valuable: Pay attention consensus proportion Shannon entropy Discussion logs provide insight: Review discussion logs controversial clusters Input quality affects results: Better marker gene data leads reliable annotations","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/05-consensus-principles.html","id":"next-steps","dir":"Articles","previous_headings":"Consensus Annotation Principles","what":"Next Steps","title":"Consensus Annotation Principles","text":"Now understand technical principles behind mLLMCelltype, can explore: Visualization Guide: Learn visualize consensus uncertainty FAQ: Find answers common questions Advanced Features: Explore hierarchical annotation advanced features Contributing Guide: Learn contribute project","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"visualization-guide","dir":"Articles","previous_headings":"","what":"Visualization Guide","title":"Visualization Guide","text":"guide provides detailed instructions visualizing mLLMCelltype results. Creating effective visualizations crucial interpreting cell type annotations communicating uncertainty metrics single-cell RNA sequencing analysis.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"basic-visualization-concepts","dir":"Articles","previous_headings":"Visualization Guide","what":"Basic Visualization Concepts","title":"Visualization Guide","text":"mLLMCelltype provides three key types information can visualized: Cell Type Annotations: final cell type labels assigned cluster Consensus Proportion: measure agreement among models (0-1) Shannon Entropy: measure uncertainty annotations (lower better) can visualized separately combined informative multi-panel figures.","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"adding-mllmcelltype-results-to-seurat-objects","dir":"Articles","previous_headings":"Visualization Guide > Integrating with Seurat","what":"Adding mLLMCelltype Results to Seurat Objects","title":"Visualization Guide","text":"visualization, need add mLLMCelltype results Seurat object:","code":"library(Seurat) library(mLLMCelltype) library(ggplot2) library(patchwork)  # Assuming you have a Seurat object named 'seurat_obj' and consensus results # Add consensus annotations to Seurat object seurat_obj$cell_type_consensus <- plyr::mapvalues(   x = as.character(Idents(seurat_obj)),   from = as.character(0:(length(consensus_results$final_annotations)-1)),   to = consensus_results$final_annotations )  # Extract consensus metrics from the consensus results # Note: These metrics are available in the consensus_results$initial_results$consensus_results consensus_metrics <- lapply(names(consensus_results$initial_results$consensus_results), function(cluster_id) {   metrics <- consensus_results$initial_results$consensus_results[[cluster_id]]   return(list(     cluster = cluster_id,     consensus_proportion = metrics$consensus_proportion,     entropy = metrics$entropy   )) })  # Convert to data frame for easier handling metrics_df <- do.call(rbind, lapply(consensus_metrics, data.frame))  # Add consensus proportion to Seurat object seurat_obj$consensus_proportion <- as.numeric(plyr::mapvalues(   x = as.character(Idents(seurat_obj)),   from = metrics_df$cluster,   to = metrics_df$consensus_proportion ))  # Add entropy to Seurat object seurat_obj$entropy <- as.numeric(plyr::mapvalues(   x = as.character(Idents(seurat_obj)),   from = metrics_df$cluster,   to = metrics_df$entropy ))"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"cell-type-annotations","dir":"Articles","previous_headings":"Visualization Guide > Integrating with Seurat > Basic Visualization with Seurat","what":"Cell Type Annotations","title":"Visualization Guide","text":"","code":"# Basic cell type visualization p1 <- DimPlot(seurat_obj,               group.by = \"cell_type_consensus\",               label = TRUE,               repel = TRUE) +   ggtitle(\"Cell Type Annotations\") +   theme(plot.title = element_text(hjust = 0.5))  p1"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"consensus-proportion","dir":"Articles","previous_headings":"Visualization Guide > Integrating with Seurat > Basic Visualization with Seurat","what":"Consensus Proportion","title":"Visualization Guide","text":"","code":"# Visualize consensus proportion p2 <- FeaturePlot(seurat_obj,                  features = \"consensus_proportion\",                  cols = c(\"yellow\", \"green\", \"blue\"),                  min.cutoff = 0.3,                  max.cutoff = 1) +   ggtitle(\"Consensus Proportion\") +   theme(plot.title = element_text(hjust = 0.5))  p2"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"shannon-entropy","dir":"Articles","previous_headings":"Visualization Guide > Integrating with Seurat > Basic Visualization with Seurat","what":"Shannon Entropy","title":"Visualization Guide","text":"","code":"# Visualize Shannon entropy p3 <- FeaturePlot(seurat_obj,                  features = \"shannon_entropy\",                  cols = c(\"red\", \"orange\", \"yellow\"),                  min.cutoff = 0,                  max.cutoff = 1.5) +   scale_color_gradient(low = \"red\", high = \"yellow\") +   ggtitle(\"Shannon Entropy\") +   theme(plot.title = element_text(hjust = 0.5))  p3"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"combined-visualization","dir":"Articles","previous_headings":"Visualization Guide > Integrating with Seurat > Basic Visualization with Seurat","what":"Combined Visualization","title":"Visualization Guide","text":"","code":"# Combine all three visualizations p1 | p2 | p3"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"publication-ready-visualizations-with-scpubr","dir":"Articles","previous_headings":"Visualization Guide","what":"Publication-Ready Visualizations with SCpubr","title":"Visualization Guide","text":"publication-quality visualizations, recommend using SCpubr package, provides enhanced aesthetics single-cell visualizations:","code":"# Install SCpubr if not already installed if (!requireNamespace(\"SCpubr\", quietly = TRUE)) {   remotes::install_github(\"enblacar/SCpubr\") }  library(SCpubr)  # Cell type annotations with SCpubr p1 <- SCpubr::do_DimPlot(seurat_obj,                          group.by = \"cell_type_consensus\",                          label = TRUE,                          repel = TRUE,                          legend.position = \"right\",                          font.size = 14,                          pt.size = 0.5,                          title = \"Cell Type Annotations\")  # Consensus proportion with SCpubr p2 <- SCpubr::do_FeaturePlot(seurat_obj,                             features = \"consensus_proportion\",                             order = TRUE,                             pt.size = 0.5,                             colors.use = c(\"yellow\", \"green\", \"blue\"),                             legend.position = \"right\",                             font.size = 14,                             title = \"Consensus Proportion\")  # Shannon entropy with SCpubr p3 <- SCpubr::do_FeaturePlot(seurat_obj,                             features = \"shannon_entropy\",                             order = TRUE,                             pt.size = 0.5,                             colors.use = c(\"red\", \"orange\", \"yellow\"),                             legend.position = \"right\",                             font.size = 14,                             title = \"Shannon Entropy\")  # Combine plots with patchwork combined_plot <- p1 | p2 | p3  # Add a common title combined_plot <- combined_plot +   plot_annotation(     title = \"mLLMCelltype Results\",     theme = theme(plot.title = element_text(size = 16, hjust = 0.5, face = \"bold\"))   )  combined_plot"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"highlighting-controversial-clusters","dir":"Articles","previous_headings":"Visualization Guide > Advanced Visualization Techniques","what":"Highlighting Controversial Clusters","title":"Visualization Guide","text":"can highlight clusters low consensus high uncertainty:","code":"# Create a new column to identify controversial clusters seurat_obj$controversial <- ifelse(seurat_obj$consensus_proportion < 0.5, \"Controversial\", \"Consensus\")  # Visualize controversial clusters SCpubr::do_DimPlot(seurat_obj,                   group.by = \"controversial\",                   colors.use = c(\"Controversial\" = \"red\", \"Consensus\" = \"blue\"),                   label = FALSE,                   pt.size = 0.5,                   title = \"Controversial vs. Consensus Clusters\")"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"visualizing-model-agreement","dir":"Articles","previous_headings":"Visualization Guide > Advanced Visualization Techniques","what":"Visualizing Model Agreement","title":"Visualization Guide","text":"visualize different models agree disagree:","code":"# Assuming you have individual model results in the Seurat object # Create a function to calculate agreement with consensus calculate_agreement <- function(seurat_obj, model_column, consensus_column) {   seurat_obj$agreement <- ifelse(     seurat_obj[[model_column]] == seurat_obj[[consensus_column]],     \"Agrees with consensus\",     \"Disagrees with consensus\"   )   return(seurat_obj) }  # Apply to each model models <- c(\"claude_3_7_sonnet\", \"gpt_4o\", \"gemini_1_5_pro\") plot_list <- list()  for (model in models) {   column_name <- paste0(\"cell_type_\", model)   temp_obj <- calculate_agreement(seurat_obj, column_name, \"cell_type_consensus\")    plot_list[[model]] <- SCpubr::do_DimPlot(temp_obj,                                           group.by = \"agreement\",                                           colors.use = c(\"Agrees with consensus\" = \"darkgreen\",                                                         \"Disagrees with consensus\" = \"darkred\"),                                           pt.size = 0.5,                                           title = paste0(model, \" Agreement\")) }  # Combine all agreement plots wrap_plots(plot_list, ncol = 2)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"heatmap-of-model-predictions","dir":"Articles","previous_headings":"Visualization Guide > Advanced Visualization Techniques","what":"Heatmap of Model Predictions","title":"Visualization Guide","text":"Create heatmap visualize model predictions cluster:","code":"library(pheatmap)  # Create a matrix of model predictions for each cluster create_prediction_matrix <- function(consensus_results, models) {   n_clusters <- length(consensus_results$final_annotations)   prediction_matrix <- matrix(NA, nrow = n_clusters, ncol = length(models))   rownames(prediction_matrix) <- paste0(\"Cluster_\", 0:(n_clusters-1))   colnames(prediction_matrix) <- models    # Extract individual model predictions from initial_results   initial_predictions <- consensus_results$initial_results$individual_predictions    for (i in 1:length(models)) {     model <- models[i]     if (model %in% names(initial_predictions)) {       predictions <- initial_predictions[[model]]       # Convert predictions to a vector if it's a list       if (is.list(predictions)) {         pred_vector <- unlist(predictions)         prediction_matrix[, i] <- pred_vector       } else {         prediction_matrix[, i] <- predictions       }     }   }    return(prediction_matrix) }  # Convert cell type names to numeric codes for visualization encode_cell_types <- function(prediction_matrix) {   unique_types <- unique(as.vector(prediction_matrix))   type_mapping <- setNames(1:length(unique_types), unique_types)    encoded_matrix <- matrix(NA, nrow = nrow(prediction_matrix), ncol = ncol(prediction_matrix))   rownames(encoded_matrix) <- rownames(prediction_matrix)   colnames(encoded_matrix) <- colnames(prediction_matrix)    for (i in 1:nrow(prediction_matrix)) {     for (j in 1:ncol(prediction_matrix)) {       encoded_matrix[i, j] <- type_mapping[prediction_matrix[i, j]]     }   }    return(list(matrix = encoded_matrix, mapping = type_mapping)) }  # Create and plot the heatmap models <- c(\"claude-3-7-sonnet-20250219\", \"gpt-4o\", \"gemini-1.5-pro\") prediction_matrix <- create_prediction_matrix(consensus_results, models) encoded_data <- encode_cell_types(prediction_matrix)  # Extract metrics for annotation row metrics_df <- do.call(rbind, lapply(consensus_metrics, data.frame))  # Add consensus and uncertainty metrics as annotations annotation_row <- data.frame(   Consensus = consensus_results$final_annotations,   Proportion = metrics_df$consensus_proportion,   Entropy = metrics_df$entropy ) rownames(annotation_row) <- rownames(prediction_matrix)  # Create color scales n_types <- length(encoded_data$mapping) cell_type_colors <- colorRampPalette(rainbow(n_types))(n_types) names(cell_type_colors) <- 1:n_types  proportion_colors <- colorRampPalette(c(\"yellow\", \"green\", \"blue\"))(100) entropy_colors <- colorRampPalette(c(\"red\", \"orange\", \"yellow\"))(100)  annotation_colors <- list(   Proportion = proportion_colors,   Entropy = entropy_colors )  # Plot heatmap pheatmap(   encoded_data$matrix,   cluster_rows = FALSE,   cluster_cols = FALSE,   annotation_row = annotation_row,   annotation_colors = annotation_colors,   main = \"Model Predictions by Cluster\",   fontsize = 10,   cellwidth = 30,   cellheight = 30,   legend = TRUE,   display_numbers = TRUE,   number_format = function(x) names(encoded_data$mapping)[encoded_data$mapping == x] )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"visualizing-discussion-logs","dir":"Articles","previous_headings":"Visualization Guide","what":"Visualizing Discussion Logs","title":"Visualization Guide","text":"discussion logs contain valuable information reasoning process. ’s visualize key aspects:","code":"library(tidytext) library(wordcloud) library(stringr)  # Extract discussion text for a specific cluster extract_discussion_text <- function(consensus_results, cluster_id) {   discussion_logs <- consensus_results$discussion_logs   if (is.null(discussion_logs) || !cluster_id %in% names(discussion_logs)) {     return(NULL)   }    discussion_text <- discussion_logs[[cluster_id]]   return(discussion_text) }  # Create a word cloud from discussion text create_discussion_wordcloud <- function(discussion_text, title = \"Discussion Word Cloud\") {   # Clean and tokenize text   words <- discussion_text %>%     str_remove_all(\"[[:punct:]]\") %>%     str_remove_all(\"[[:digit:]]\") %>%     str_to_lower() %>%     str_split(\"\\\\s+\") %>%     unlist()    # Remove stop words   stop_words <- c(\"the\", \"and\", \"a\", \"to\", \"of\", \"is\", \"in\", \"that\", \"this\", \"it\", \"as\", \"for\", \"with\", \"be\", \"are\", \"on\", \"by\", \"an\", \"or\", \"at\", \"but\", \"not\", \"from\", \"have\", \"has\", \"was\", \"were\")   words <- words[!words %in% stop_words]    # Count word frequencies   word_freq <- table(words)   word_freq <- sort(word_freq, decreasing = TRUE)    # Create word cloud   par(mar = c(0, 0, 2, 0))   wordcloud(names(word_freq), freq = word_freq, min.freq = 2, max.words = 100,             random.order = FALSE, colors = brewer.pal(8, \"Dark2\"), main = title)   title(main = title) }  # Example usage cluster_id <- \"0\"  # Replace with the cluster you want to visualize discussion_text <- extract_discussion_text(consensus_results, cluster_id) if (!is.null(discussion_text)) {   create_discussion_wordcloud(discussion_text,                              title = paste(\"Cluster\", cluster_id, \"Discussion Keywords\")) }"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"saving-visualizations","dir":"Articles","previous_headings":"Visualization Guide","what":"Saving Visualizations","title":"Visualization Guide","text":"save visualizations publications presentations:","code":"# Save a single plot ggsave(\"cell_type_annotations.png\", plot = p1, width = 10, height = 8, dpi = 300)  # Save the combined plot ggsave(\"mLLMCelltype_results.png\", plot = combined_plot, width = 15, height = 8, dpi = 300)  # Save as PDF for vector graphics ggsave(\"mLLMCelltype_results.pdf\", plot = combined_plot, width = 15, height = 8)"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"color-selection","dir":"Articles","previous_headings":"Visualization Guide > Visualization Best Practices","what":"Color Selection","title":"Visualization Guide","text":"Cell Type Annotations: Use distinct colors different cell types Consensus Proportion: Use gradient yellow (low) blue (high) Shannon Entropy: Use gradient red (low uncertainty) yellow (high uncertainty)","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"layout-considerations","dir":"Articles","previous_headings":"Visualization Guide > Visualization Best Practices","what":"Layout Considerations","title":"Visualization Guide","text":"Arrange plots logical order (annotations, consensus, entropy) Use consistent point sizes fonts across plots Include informative titles legends Consider adding cluster labels easier reference","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"accessibility","dir":"Articles","previous_headings":"Visualization Guide > Visualization Best Practices","what":"Accessibility","title":"Visualization Guide","text":"Choose colorblind-friendly palettes possible Include text labels addition colors Ensure sufficient contrast readability Consider alternative representations complex data","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"example-complete-visualization-workflow","dir":"Articles","previous_headings":"Visualization Guide","what":"Example: Complete Visualization Workflow","title":"Visualization Guide","text":"’s complete example workflow creating publication-ready visualizations:","code":"library(Seurat) library(mLLMCelltype) library(ggplot2) library(patchwork) library(SCpubr)  # Load data and results # Assuming you have a Seurat object and consensus results  # Add results to Seurat object seurat_obj$cell_type_consensus <- plyr::mapvalues(   x = as.character(Idents(seurat_obj)),   from = as.character(0:(length(consensus_results$final_annotations)-1)),   to = consensus_results$final_annotations )  # Extract consensus metrics from the consensus results consensus_metrics <- lapply(names(consensus_results$initial_results$consensus_results), function(cluster_id) {   metrics <- consensus_results$initial_results$consensus_results[[cluster_id]]   return(list(     cluster = cluster_id,     consensus_proportion = metrics$consensus_proportion,     entropy = metrics$entropy   )) })  # Convert to data frame for easier handling metrics_df <- do.call(rbind, lapply(consensus_metrics, data.frame))  # Add consensus proportion to Seurat object seurat_obj$consensus_proportion <- as.numeric(plyr::mapvalues(   x = as.character(Idents(seurat_obj)),   from = metrics_df$cluster,   to = metrics_df$consensus_proportion ))  # Add entropy to Seurat object seurat_obj$entropy <- as.numeric(plyr::mapvalues(   x = as.character(Idents(seurat_obj)),   from = metrics_df$cluster,   to = metrics_df$entropy ))  # Create publication-ready visualizations p1 <- SCpubr::do_DimPlot(seurat_obj,                          group.by = \"cell_type_consensus\",                          label = TRUE,                          repel = TRUE,                          legend.position = \"right\",                          font.size = 14,                          pt.size = 0.5,                          title = \"Cell Type Annotations\")  p2 <- SCpubr::do_FeaturePlot(seurat_obj,                             features = \"consensus_proportion\",                             order = TRUE,                             pt.size = 0.5,                             colors.use = c(\"yellow\", \"green\", \"blue\"),                             legend.position = \"right\",                             font.size = 14,                             title = \"Consensus Proportion\")  p3 <- SCpubr::do_FeaturePlot(seurat_obj,                             features = \"shannon_entropy\",                             order = TRUE,                             pt.size = 0.5,                             colors.use = c(\"red\", \"orange\", \"yellow\"),                             legend.position = \"right\",                             font.size = 14,                             title = \"Shannon Entropy\")  # Combine plots combined_plot <- p1 | p2 | p3  # Add annotation combined_plot <- combined_plot +   plot_annotation(     title = \"mLLMCelltype Results\",     subtitle = \"Cell type annotations with uncertainty metrics\",     caption = \"Created with mLLMCelltype and SCpubr\",     theme = theme(       plot.title = element_text(size = 16, hjust = 0.5, face = \"bold\"),       plot.subtitle = element_text(size = 12, hjust = 0.5),       plot.caption = element_text(size = 10, hjust = 1)     )   )  # Save the visualization ggsave(\"mLLMCelltype_visualization.png\",        plot = combined_plot,        width = 15,        height = 8,        dpi = 300)  # Also save as PDF for vector graphics ggsave(\"mLLMCelltype_visualization.pdf\",        plot = combined_plot,        width = 15,        height = 8)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/06-visualization-guide.html","id":"next-steps","dir":"Articles","previous_headings":"Visualization Guide","what":"Next Steps","title":"Visualization Guide","text":"Now know create effective visualizations mLLMCelltype results, can explore: FAQ: Find answers common questions Advanced Features: Explore hierarchical annotation advanced features Contributing Guide: Learn contribute project Version History: Review development history mLLMCelltype","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"frequently-asked-questions","dir":"Articles","previous_headings":"","what":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"document addresses common questions using mLLMCelltype cell type annotation single-cell RNA sequencing data.","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"what-makes-mllmcelltype-different-from-other-cell-type-annotation-tools","dir":"Articles","previous_headings":"Frequently Asked Questions > General Questions","what":"What makes mLLMCelltype different from other cell type annotation tools?","title":"Frequently Asked Questions","text":"mLLMCelltype differs traditional cell type annotation tools several key ways: reference dataset required: Unlike reference-based methods, mLLMCelltype doesn’t require pre-existing reference dataset. Multi-model consensus: mLLMCelltype leverages multiple large language models achieve reliable annotations single model provide. Transparent reasoning: package provides complete reasoning chains annotations, making process interpretable transparent. Uncertainty quantification: mLLMCelltype provides explicit uncertainty metrics (consensus proportion Shannon entropy) identify ambiguous cell populations. Structured deliberation: controversial clusters, mLLMCelltype initiates structured discussion process among models reach reliable consensus.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"which-tissues-and-species-does-mllmcelltype-support","dir":"Articles","previous_headings":"Frequently Asked Questions > General Questions","what":"Which tissues and species does mLLMCelltype support?","title":"Frequently Asked Questions","text":"mLLMCelltype can annotate cell types virtually tissue species, relies biological knowledge embedded large language models rather pre-defined reference datasets. However, performance may vary depending well-characterized tissue scientific literature. package extensively tested : - Human tissues (PBMC, bone marrow, brain, lung, liver, kidney, etc.) - Mouse tissues (brain, lung, kidney, etc.) - model organisms (zebrafish, fruit fly, etc.) specialized poorly characterized tissues, uncertainty metrics help identify clusters may require expert review.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"how-accurate-is-mllmcelltype-compared-to-other-methods","dir":"Articles","previous_headings":"Frequently Asked Questions > General Questions","what":"How accurate is mLLMCelltype compared to other methods?","title":"Frequently Asked Questions","text":"benchmarking studies (see paper), mLLMCelltype consistently outperformed traditional annotation methods single-LLM approaches: Compared reference-based methods (e.g., SingleR, Seurat label transfer), mLLMCelltype showed comparable better performance without requiring reference dataset. Compared marker-based methods (e.g., SCINA, CellAssign), mLLMCelltype demonstrated higher accuracy flexibility. Compared single-LLM approaches, consensus mechanism improved accuracy 15-30% depending tissue type. accuracy advantage particularly pronounced rare cell types tissues limited reference data.","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"how-does-mllmcelltype-handle-0-based-vs--1-based-cluster-indices","dir":"Articles","previous_headings":"Frequently Asked Questions > Technical Questions","what":"How does mLLMCelltype handle 0-based vs. 1-based cluster indices?","title":"Frequently Asked Questions","text":"mLLMCelltype strictly works 0-based cluster indices, compatible Seurat’s default indexing. means: Cluster indices start 0, 1 data uses 1-based indexing, need convert 0-based using mLLMCelltype package performs validation ensure cluster indices start 0 design choice made ensure compatibility Seurat, one widely used single-cell analysis frameworks.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"what-is-the-recommended-number-of-marker-genes-per-cluster","dir":"Articles","previous_headings":"Frequently Asked Questions > Technical Questions","what":"What is the recommended number of marker genes per cluster?","title":"Frequently Asked Questions","text":"default setting uses top 10 marker genes per cluster, works well scenarios. However, can adjust using top_gene_count parameter: well-characterized cell types: 5-10 marker genes usually sufficient rare poorly characterized cell types: 10-20 marker genes may beneficial noisy data: Fewer genes (5-7) might give better results focusing strongest signals optimal number depends quality marker genes complexity tissue. recommend starting default 10 adjusting based results.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"how-does-caching-work-in-mllmcelltype","dir":"Articles","previous_headings":"Frequently Asked Questions > Technical Questions","what":"How does caching work in mLLMCelltype?","title":"Frequently Asked Questions","text":"mLLMCelltype implements caching system avoid redundant API calls, saves time reduces costs: default, caching enabled (cache = TRUE) cache based hash input data, model, parameters Results stored local directory (default: temporary directory) can specify custom cache directory using cache_dir parameter clear cache: Note: annotate_cell_types function built-caching. need caching, ’ll need implement separately.","code":"cache_manager <- CacheManager$new() cache_manager$clear_cache()"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"how-does-mllmcelltype-handle-rate-limits-and-api-errors","dir":"Articles","previous_headings":"Frequently Asked Questions > Technical Questions","what":"How does mLLMCelltype handle rate limits and API errors?","title":"Frequently Asked Questions","text":"package includes error handling API calls: Detailed error messages: API call fails, error message includes details help diagnose issue ’re processing many clusters, might encounter rate limits. case: Reduce number models used initial annotation Process batches clusters separately pauses batches Consider implementing retry mechanism needed","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"how-long-does-it-take-to-run-mllmcelltype","dir":"Articles","previous_headings":"Frequently Asked Questions > Performance and Optimization","what":"How long does it take to run mLLMCelltype?","title":"Frequently Asked Questions","text":"runtime depends several factors: Number clusters: cluster requires separate API calls Number models: models means API calls Discussion process: Controversial clusters require additional API calls discussion API response times: Different providers different response times Network conditions: Internet speed reliability affect performance Typical runtimes: - Single model, 10 clusters: 1-2 minutes - Multi-model consensus (3 models), 10 clusters: 3-5 minutes - Multi-model consensus discussion, 10 clusters: 5-10 minutes optimize runtime: - Implement caching mechanism needed - Start fewer models initial exploration - Use higher controversy_threshold reduce number controversial clusters - Process large datasets batches","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"what-are-the-api-costs-associated-with-using-mllmcelltype","dir":"Articles","previous_headings":"Frequently Asked Questions > Performance and Optimization","what":"What are the API costs associated with using mLLMCelltype?","title":"Frequently Asked Questions","text":"API costs depend models use number clusters: OpenAI models (GPT-4o, etc.): $0.01-0.05 per cluster annotation Anthropic models (Claude 3.7, etc.): $0.01-0.03 per cluster annotation Google models (Gemini 1.5, etc.): $0.001-0.01 per cluster annotation models: Generally lower cost OpenRouter free models: $0.00 (free :free suffix) typical dataset 10-20 clusters: - Single model annotation: $0.10-1.00 total - Multi-model consensus (3 models): $0.30-3.00 total - discussion process: Additional $0.10-1.00 - Using OpenRouter free models: $0.00 total reduce costs: - Implement caching mechanism avoid redundant API calls - Start economical models - Use fewer models initial exploration - Reserve multi-model consensus final analysis - Consider using OpenRouter free models (see )","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"how-can-i-use-openrouter-free-models","dir":"Articles","previous_headings":"Frequently Asked Questions > Performance and Optimization","what":"How can I use OpenRouter free models?","title":"Frequently Asked Questions","text":"OpenRouter provides access several high-quality models free: Sign OpenRouter account openrouter.ai Get API key OpenRouter dashboard Use models :free suffix: meta-llama/llama-4-maverick:free - Meta Llama 4 Maverick (256K context) nvidia/llama-3.1-nemotron-ultra-253b-v1:free - NVIDIA Nemotron Ultra 253B deepseek/deepseek-chat-v3-0324:free - DeepSeek Chat v3 microsoft/mai-ds-r1:free - Microsoft MAI-DS-R1 Free models don’t consume credits may limitations compared paid models.","code":"# Set your OpenRouter API key Sys.setenv(OPENROUTER_API_KEY = \"your-openrouter-api-key\")  # Use a free model results <- annotate_cell_types(   input = marker_data,   tissue_name = \"human PBMC\",   model = \"meta-llama/llama-4-maverick:free\",  # Note the :free suffix   api_key = Sys.getenv(\"OPENROUTER_API_KEY\")   # No need to specify provider - it's automatically detected from the model name format )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"how-can-i-improve-the-accuracy-of-annotations","dir":"Articles","previous_headings":"Frequently Asked Questions > Performance and Optimization","what":"How can I improve the accuracy of annotations?","title":"Frequently Asked Questions","text":"get accurate annotations: Use multiple high-quality models: Include diverse, high-performing models like Claude 3.7, GPT-4o, Gemini 1.5 Provide good marker genes: Use robust differential expression analysis identify strong marker genes Specify correct tissue: Always provide correct tissue name give models proper context Review uncertainty metrics: Pay attention consensus proportion Shannon entropy identify clusters may need manual review Examine discussion logs: controversial clusters, review discussion logs understand reasoning Iterate needed: results unsatisfactory, try adjusting parameters providing additional context","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"why-am-i-getting-different-results-with-the-same-input","dir":"Articles","previous_headings":"Frequently Asked Questions > Troubleshooting","what":"Why am I getting different results with the same input?","title":"Frequently Asked Questions","text":"several possible reasons getting different results input: Model updates: LLMs regularly updated, can change outputs Temperature/sampling: randomness inherent LLM outputs Context window limitations: Different runs might include slightly different context API changes: Providers may change APIs work ensure reproducibility: - Implement caching mechanism reuse results - Specify model versions explicitly available - Save document results - Consider saving raw API responses future reference","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"im-getting-an-error-about-invalid-cluster-indices--what-should-i-do","dir":"Articles","previous_headings":"Frequently Asked Questions > Troubleshooting","what":"I’m getting an error about invalid cluster indices. What should I do?","title":"Frequently Asked Questions","text":"see error like “Cluster indices must start 0”, means data using 1-based indexing instead required 0-based indexing. fix : Check cluster column ensure starts 0, 1 using Seurat’s FindAllMarkers output, already 0-based data 1-based, convert :","code":"# Convert 1-based to 0-based indexing markers$cluster <- markers$cluster - 1"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"how-do-i-handle-api-key-not-found-errors","dir":"Articles","previous_headings":"Frequently Asked Questions > Troubleshooting","what":"How do I handle “API key not found” errors?","title":"Frequently Asked Questions","text":"get error missing API keys: Check environment variables: Ensure API keys set correctly .env file environment Provide keys directly: Pass API key directly function: Check provider name: Make sure ’re using correct provider name API key: Verify key validity: Check API key still valid testing directly provider’s API","code":"results <- annotate_cell_types(..., api_key = \"your-api-key\") # Set API key for a specific provider Sys.setenv(ANTHROPIC_API_KEY = \"your-anthropic-key\")"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"why-are-some-cell-types-not-being-correctly-identified","dir":"Articles","previous_headings":"Frequently Asked Questions > Troubleshooting","what":"Why are some cell types not being correctly identified?","title":"Frequently Asked Questions","text":"specific cell types correctly identified: Check marker genes: Ensure marker genes cell types strong specific Provide context: Specify tissue type accurately give models right context Use models: Different models different strengths; using multiple models improves coverage Increase marker count: Try increasing top_gene_count include marker genes Review discussion logs: controversial clusters, examine discussion understand reasoning Consider rare cell types: cell types may poorly represented training data LLMs","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"how-does-mllmcelltype-integrate-with-seurat","dir":"Articles","previous_headings":"Frequently Asked Questions > Integration with Other Tools","what":"How does mLLMCelltype integrate with Seurat?","title":"Frequently Asked Questions","text":"mLLMCelltype integrates seamlessly Seurat: Input: can directly use Seurat’s FindAllMarkers() output input Output: Annotation results can easily added Seurat object: Visualization: Use Seurat’s visualization functions added annotations:","code":"seurat_obj$cell_type_consensus <- plyr::mapvalues(   x = as.character(Idents(seurat_obj)),   from = as.character(0:(length(consensus_results$final_annotations)-1)),   to = consensus_results$final_annotations ) DimPlot(seurat_obj, group.by = \"cell_type_consensus\", label = TRUE)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"can-i-use-mllmcelltype-with-scanpyanndata-in-r","dir":"Articles","previous_headings":"Frequently Asked Questions > Integration with Other Tools","what":"Can I use mLLMCelltype with Scanpy/AnnData in R?","title":"Frequently Asked Questions","text":"Yes, can use mLLMCelltype Scanpy/AnnData objects R: Extract marker genes: Export marker genes Scanpy analysis CSV file Run mLLMCelltype: Use CSV file input mLLMCelltype Import results: Add annotation results back AnnData object Alternatively, can use Python version mLLMCelltype direct integration Scanpy.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"how-can-i-combine-mllmcelltype-with-traditional-annotation-methods","dir":"Articles","previous_headings":"Frequently Asked Questions > Integration with Other Tools","what":"How can I combine mLLMCelltype with traditional annotation methods?","title":"Frequently Asked Questions","text":"mLLMCelltype can used alongside traditional annotation methods: Complementary approach: Use methods compare results Validation: Use mLLMCelltype validate annotations reference-based methods Hybrid approach: Use reference-based methods well-characterized cell types mLLMCelltype novel rare cell types Ensemble method: Create consensus mLLMCelltype traditional methods","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"how-can-i-customize-the-prompts-used-by-mllmcelltype","dir":"Articles","previous_headings":"Frequently Asked Questions > Advanced Usage","what":"How can I customize the prompts used by mLLMCelltype?","title":"Frequently Asked Questions","text":"mLLMCelltype uses carefully designed prompts, advanced users can customize :","code":"# Create a custom annotation prompt custom_prompt <- create_annotation_prompt(   marker_data = your_markers,   tissue_name = \"your_tissue\",   top_gene_count = 10,   custom_instructions = \"Also consider developmental stage and activation state.\" )  # Use the custom prompt directly response <- get_model_response(   prompt = custom_prompt,   model = \"claude-3-7-sonnet-20250219\",   api_key = your_api_key )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"can-i-add-my-own-custom-llm-models","dir":"Articles","previous_headings":"Frequently Asked Questions > Advanced Usage","what":"Can I add my own custom LLM models?","title":"Frequently Asked Questions","text":"Yes, can register custom models providers:","code":"# Register a custom provider register_custom_provider(   provider_name = \"my_provider\",   api_url = \"https://api.my-provider.com/v1/chat/completions\",   api_key_env_var = \"MY_PROVIDER_API_KEY\",   process_function = function(prompt, api_key) {     # Custom implementation   } )  # Register a custom model register_custom_model(   model_name = \"my-custom-model\",   provider = \"my_provider\" )  # Use the custom model results <- annotate_cell_types(   input = your_markers,   tissue_name = \"your_tissue\",   model = \"my-custom-model\",   api_key = your_api_key )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"how-can-i-contribute-to-mllmcelltype","dir":"Articles","previous_headings":"Frequently Asked Questions > Advanced Usage","what":"How can I contribute to mLLMCelltype?","title":"Frequently Asked Questions","text":"welcome contributions! ways contribute: Report issues: Report bugs suggest features GitHub repository Improve documentation: Help us improve documentation examples Add new models: Implement support new LLM models Share benchmarks: Share benchmarking results different tissues species Develop new features: Contribute code new features improvements See Contributing Guide details.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/07-faq.html","id":"next-steps","dir":"Articles","previous_headings":"Frequently Asked Questions","what":"Next Steps","title":"Frequently Asked Questions","text":"Now answers common questions, can explore: Advanced Features: Learn hierarchical annotation advanced features Contributing Guide: Find contribute project Version History: Review development history mLLMCelltype","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"advanced-features-case-studies","dir":"Articles","previous_headings":"","what":"Advanced Features & Case Studies","title":"Advanced Features & Case Studies","text":"article explores advanced features mLLMCelltype presents real-world case studies demonstrating application various research contexts.","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"understanding-hierarchical-annotation","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Hierarchical Cell Type Annotation","what":"Understanding Hierarchical Annotation","title":"Advanced Features & Case Studies","text":"Cell types often exist hierarchical relationships. example, T cells can classified CD4+ T cells, CD8+ T cells, regulatory T cells, etc. mLLMCelltype supports hierarchical annotation capture relationships.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"implementing-hierarchical-annotation","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Hierarchical Cell Type Annotation","what":"Implementing Hierarchical Annotation","title":"Advanced Features & Case Studies","text":"perform hierarchical annotation:","code":"library(mLLMCelltype) library(Seurat)  # Step 1: Perform initial high-level annotation high_level_results <- annotate_cell_types(   input = marker_data,   tissue_name = \"human PBMC\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\"),   top_gene_count = 10 )  # Step 2: Add high-level annotations to Seurat object seurat_obj$high_level_celltype <- plyr::mapvalues(   x = as.character(Idents(seurat_obj)),   from = as.character(0:(length(high_level_results)-1)),   to = high_level_results )  # Step 3: Subset T cells for further annotation t_cells <- subset(seurat_obj, high_level_celltype == \"T cells\")  # Step 4: Find markers within T cells t_cell_markers <- FindAllMarkers(t_cells, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)  # Step 5: Perform T cell subtype annotation t_cell_subtypes <- annotate_cell_types(   input = t_cell_markers,   tissue_name = \"human PBMC T cells\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\"),   top_gene_count = 10 )  # Step 6: Add T cell subtypes back to original object t_cell_barcodes <- WhichCells(t_cells) seurat_obj$detailed_celltype <- seurat_obj$high_level_celltype seurat_obj$detailed_celltype[t_cell_barcodes] <- plyr::mapvalues(   x = as.character(Idents(t_cells)),   from = as.character(0:(length(t_cell_subtypes)-1)),   to = paste0(\"T cells: \", t_cell_subtypes) )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"ensuring-parent-child-consistency","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Hierarchical Cell Type Annotation","what":"Ensuring Parent-Child Consistency","title":"Advanced Features & Case Studies","text":"ensure consistency hierarchical levels:","code":"# Function to check parent-child consistency check_hierarchy_consistency <- function(high_level, detailed_level) {   # Extract parent type from detailed annotation (before the colon)   parent_from_detailed <- sapply(strsplit(detailed_level, \": \"), function(x) x[1])    # Check if parent matches high-level annotation   consistent <- parent_from_detailed == high_level    # Return consistency check results   data.frame(     high_level = high_level,     detailed_level = detailed_level,     consistent = consistent   ) }  # Apply consistency check hierarchy_check <- check_hierarchy_consistency(   seurat_obj$high_level_celltype,   seurat_obj$detailed_celltype )  # Identify inconsistencies inconsistencies <- hierarchy_check[!hierarchy_check$consistent, ] print(inconsistencies)"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"strategies-for-noisy-marker-genes","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Handling Noisy Input Data","what":"Strategies for Noisy Marker Genes","title":"Advanced Features & Case Studies","text":"Real-world scRNA-seq data often contains noise. strategies handling noisy input:","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"adjust-the-top_gene_count-parameter","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Handling Noisy Input Data > Strategies for Noisy Marker Genes","what":"1. Adjust the top_gene_count parameter","title":"Advanced Features & Case Studies","text":"","code":"# For noisy data, use fewer top genes results_fewer_genes <- annotate_cell_types(   input = noisy_markers,   tissue_name = \"human PBMC\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\"),   top_gene_count = 5  # Use fewer genes to focus on strongest signals )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"use-stricter-filtering-for-marker-genes","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Handling Noisy Input Data > Strategies for Noisy Marker Genes","what":"2. Use stricter filtering for marker genes","title":"Advanced Features & Case Studies","text":"","code":"# Apply stricter filtering to marker genes filtered_markers <- marker_data %>%   filter(p_val_adj < 0.01, avg_log2FC > 1.0)  # Stricter thresholds  # Annotate with filtered markers results_filtered <- annotate_cell_types(   input = filtered_markers,   tissue_name = \"human PBMC\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\") )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"use-multi-model-consensus","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Handling Noisy Input Data > Strategies for Noisy Marker Genes","what":"3. Use multi-model consensus","title":"Advanced Features & Case Studies","text":"","code":"# Use multiple models to overcome noise models <- c(   \"claude-3-7-sonnet-20250219\",   \"gpt-4o\",   \"gemini-1.5-pro\" )  # Run annotation with multiple models results <- list() for (model in models) {   provider <- get_provider(model)   api_key <- api_keys[[provider]]    results[[model]] <- annotate_cell_types(     input = noisy_markers,     tissue_name = \"human PBMC\",     model = model,     api_key = api_key   ) }  # Create consensus using interactive_consensus_annotation consensus_results <- interactive_consensus_annotation(   input = noisy_markers,   tissue_name = \"human PBMC\",   models = models,  # Use all the models defined above   api_keys = api_keys,   controversy_threshold = 0.7,   entropy_threshold = 1.0,   consensus_check_model = \"claude-3-7-sonnet-20250219\" )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"case-study-annotation-with-batch-effects","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Handling Noisy Input Data","what":"Case Study: Annotation with Batch Effects","title":"Advanced Features & Case Studies","text":"case study demonstrates mLLMCelltype handles data batch effects:","code":"# Simulated data with batch effects # In real scenarios, this would be your actual data with batch effects batch_affected_markers <- read.csv(\"path/to/batch_affected_markers.csv\")  # Approach 1: Use multi-model consensus with interactive_consensus_annotation batch_consensus <- interactive_consensus_annotation(   input = batch_affected_markers,   tissue_name = \"mouse brain\",   models = c(\"claude-3-7-sonnet-20250219\", \"gpt-4o\", \"gemini-1.5-pro\"),   api_keys = list(     \"anthropic\" = Sys.getenv(\"ANTHROPIC_API_KEY\"),     \"openai\" = Sys.getenv(\"OPENAI_API_KEY\"),     \"gemini\" = Sys.getenv(\"GEMINI_API_KEY\")   ),   controversy_threshold = 0.4  # Lower threshold to discuss more clusters )  # Approach 2: Include batch information in tissue context batch_aware_results <- annotate_cell_types(   input = batch_affected_markers,   tissue_name = \"mouse brain with technical batch effects\",  # Include batch context   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\") )"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"incorporating-prior-knowledge","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Integration with External Knowledge","what":"Incorporating Prior Knowledge","title":"Advanced Features & Case Studies","text":"can incorporate prior biological knowledge improve annotations:","code":"# Create a custom annotation prompt with prior knowledge custom_prompt <- create_annotation_prompt(   marker_data = marker_data,   tissue_name = \"human PBMC\",   top_gene_count = 10,   custom_instructions = \"     Consider the following prior knowledge:     1. This sample is from a patient with rheumatoid arthritis     2. We expect to see activated T cells and B cells     3. Previous studies have identified CXCR4-high monocytes in this condition     Please take this information into account when making annotations.   \" )  # Use the custom prompt custom_results <- get_model_response(   prompt = custom_prompt,   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\") )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"integrating-with-external-databases","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Integration with External Knowledge","what":"Integrating with External Databases","title":"Advanced Features & Case Studies","text":"","code":"# Example of integrating with CellMarker database library(httr) library(jsonlite)  # Function to query CellMarker database query_cellmarker <- function(cell_type, species = \"Human\") {   url <- paste0(     \"http://bio-bigdata.hrbmu.edu.cn/CellMarker/search.do?species=\",     URLencode(species),     \"&cellType=\",     URLencode(cell_type)   )    response <- GET(url)   content <- content(response, \"text\")    # Parse the response (simplified example)   # In practice, you would need to parse the HTML response   markers <- c(\"Example marker 1\", \"Example marker 2\")    return(markers) }  # Enhance annotation with CellMarker database enhance_annotation_with_cellmarker <- function(annotation_results) {   enhanced_results <- list()    for (i in 1:length(annotation_results)) {     cell_type <- annotation_results[i]     database_markers <- query_cellmarker(cell_type)      enhanced_results[[i]] <- list(       cell_type = cell_type,       database_markers = database_markers     )   }    return(enhanced_results) }  # Apply enhancement enhanced_annotations <- enhance_annotation_with_cellmarker(results)"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"case-study-1-pbmc-dataset","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Case Studies","what":"Case Study 1: PBMC Dataset","title":"Advanced Features & Case Studies","text":"case study demonstrates application mLLMCelltype standard PBMC dataset:","code":"library(Seurat) library(mLLMCelltype) library(ggplot2) library(patchwork)  # Load PBMC data pbmc <- readRDS(\"path/to/pbmc_data.rds\")  # Find marker genes pbmc_markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)  # Define models to use models <- c(   \"claude-3-7-sonnet-20250219\",   \"gpt-4o\",   \"gemini-1.5-pro\" )  # API keys api_keys <- list(   anthropic = Sys.getenv(\"ANTHROPIC_API_KEY\"),   openai = Sys.getenv(\"OPENAI_API_KEY\"),   gemini = Sys.getenv(\"GEMINI_API_KEY\") )  # Run annotation with multiple models results <- list() for (model in models) {   provider <- get_provider(model)   api_key <- api_keys[[provider]]    results[[model]] <- annotate_cell_types(     input = pbmc_markers,     tissue_name = \"human PBMC\",     model = model,     api_key = api_key   ) }  # Create consensus using interactive_consensus_annotation consensus_results <- interactive_consensus_annotation(   input = pbmc_markers,   tissue_name = \"human PBMC\",   models = models,  # Use all the models defined above   api_keys = api_keys,   controversy_threshold = 0.7,   entropy_threshold = 1.0,   consensus_check_model = \"claude-3-7-sonnet-20250219\" )  # Print consensus summary print_consensus_summary(consensus_results)  # Add results to Seurat object pbmc$cell_type_consensus <- plyr::mapvalues(   x = as.character(Idents(pbmc)),   from = as.character(0:(length(consensus_results$final_annotations)-1)),   to = consensus_results$final_annotations )  # Visualize results DimPlot(pbmc, group.by = \"cell_type_consensus\", label = TRUE) +   ggtitle(\"PBMC Cell Types\")"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"case-study-2-rare-cell-type-identification","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Case Studies","what":"Case Study 2: Rare Cell Type Identification","title":"Advanced Features & Case Studies","text":"case study demonstrates mLLMCelltype can identify rare cell types:","code":"# Load dataset with rare cell types rare_cell_data <- readRDS(\"path/to/rare_cell_data.rds\")  # Find markers rare_cell_markers <- FindAllMarkers(rare_cell_data, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)  # Use multiple models with higher top_gene_count for rare cells models <- c(   \"claude-3-7-sonnet-20250219\",   \"gpt-4o\",   \"gemini-1.5-pro\" )  # Run annotation with multiple models rare_cell_results <- list() for (model in models) {   provider <- get_provider(model)   api_key <- api_keys[[provider]]    rare_cell_results[[model]] <- annotate_cell_types(     input = rare_cell_markers,     tissue_name = \"human bone marrow\",     model = model,     api_key = api_key,     top_gene_count = 15  # Use more genes for rare cell types   ) }  # Create consensus with lower controversy threshold rare_cell_consensus <- interactive_consensus_annotation(   input = rare_cell_markers,   tissue_name = \"human bone marrow\",   models = models,  # Use all the models defined above   api_keys = api_keys,   controversy_threshold = 0.4,  # Lower threshold to discuss more clusters   entropy_threshold = 0.8,  # Lower entropy threshold for rare cells   consensus_check_model = \"claude-3-7-sonnet-20250219\" )  # Analyze discussion logs for rare cell clusters rare_cell_discussions <- rare_cell_consensus$discussion_logs"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"case-study-3-cross-species-comparison","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Case Studies","what":"Case Study 3: Cross-Species Comparison","title":"Advanced Features & Case Studies","text":"case study demonstrates mLLMCelltype can used cross-species comparison:","code":"# Load human and mouse brain data human_brain <- readRDS(\"path/to/human_brain.rds\") mouse_brain <- readRDS(\"path/to/mouse_brain.rds\")  # Find markers for both datasets human_markers <- FindAllMarkers(human_brain, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25) mouse_markers <- FindAllMarkers(mouse_brain, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)  # Annotate human brain human_results <- annotate_cell_types(   input = human_markers,   tissue_name = \"human brain cortex\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\") )  # Annotate mouse brain mouse_results <- annotate_cell_types(   input = mouse_markers,   tissue_name = \"mouse brain cortex\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\") )  # Add annotations to Seurat objects human_brain$cell_type <- plyr::mapvalues(   x = as.character(Idents(human_brain)),   from = as.character(0:(length(human_results)-1)),   to = human_results )  mouse_brain$cell_type <- plyr::mapvalues(   x = as.character(Idents(mouse_brain)),   from = as.character(0:(length(mouse_results)-1)),   to = mouse_results )  # Compare cell type proportions human_proportions <- table(human_brain$cell_type) / length(human_brain$cell_type) mouse_proportions <- table(mouse_brain$cell_type) / length(mouse_brain$cell_type)  # Create comparison plot comparison_data <- data.frame(   cell_type = names(human_proportions),   human = as.numeric(human_proportions),   mouse = as.numeric(mouse_proportions)[match(names(human_proportions), names(mouse_proportions))] )  ggplot(comparison_data, aes(x = human, y = mouse, label = cell_type)) +   geom_point() +   geom_text_repel() +   geom_abline(slope = 1, intercept = 0, linetype = \"dashed\") +   labs(x = \"Human Brain Proportion\", y = \"Mouse Brain Proportion\",        title = \"Cross-Species Cell Type Comparison\") +   theme_minimal()"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"accuracy-benchmarking","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Performance Benchmarking","what":"Accuracy Benchmarking","title":"Advanced Features & Case Studies","text":"section presents benchmarking results comparing mLLMCelltype annotation methods:","code":"# Load benchmark results benchmark_results <- read.csv(\"path/to/benchmark_results.csv\")  # Plot accuracy comparison ggplot(benchmark_results, aes(x = Method, y = Accuracy, fill = Method)) +   geom_bar(stat = \"identity\") +   geom_errorbar(aes(ymin = Accuracy - SE, ymax = Accuracy + SE), width = 0.2) +   labs(title = \"Cell Type Annotation Accuracy Comparison\",        x = \"Method\", y = \"Accuracy (%)\") +   theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"runtime-and-cost-comparison","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Performance Benchmarking","what":"Runtime and Cost Comparison","title":"Advanced Features & Case Studies","text":"","code":"# Load runtime and cost data performance_data <- read.csv(\"path/to/performance_data.csv\")  # Plot runtime comparison p1 <- ggplot(performance_data, aes(x = Method, y = Runtime_seconds, fill = Method)) +   geom_bar(stat = \"identity\") +   labs(title = \"Runtime Comparison\",        x = \"Method\", y = \"Runtime (seconds)\") +   theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Plot cost comparison p2 <- ggplot(performance_data, aes(x = Method, y = Cost_USD, fill = Method)) +   geom_bar(stat = \"identity\") +   labs(title = \"Cost Comparison\",        x = \"Method\", y = \"Cost (USD)\") +   theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1))  p1 / p2"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"custom-processing-functions","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Advanced Customization","what":"Custom Processing Functions","title":"Advanced Features & Case Studies","text":"advanced users, mLLMCelltype allows custom processing functions:","code":"# Define a custom processing function custom_process <- function(prompt, api_key) {   # Custom implementation to process prompts and get responses   # This is a simplified example   response <- \"Custom cell type: T cells\"   return(response) }  # Register the custom processing function register_custom_provider(   provider_name = \"custom_provider\",   api_url = \"https://api.custom-provider.com/v1/chat/completions\",   api_key_env_var = \"CUSTOM_API_KEY\",   process_function = custom_process )  # Register a custom model register_custom_model(   model_name = \"custom-model\",   provider = \"custom_provider\" )  # Use the custom model custom_results <- annotate_cell_types(   input = marker_data,   tissue_name = \"human PBMC\",   model = \"custom-model\",   api_key = \"your-custom-api-key\" )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"advanced-logging","dir":"Articles","previous_headings":"Advanced Features & Case Studies > Advanced Customization","what":"Advanced Logging","title":"Advanced Features & Case Studies","text":"mLLMCelltype provides advanced logging capabilities:","code":"# Create a custom logger logger <- DiscussionLogger$new(log_file = \"path/to/log_file.txt\")  # Log a message logger$log(\"Starting annotation process\")  # Log with a specific level logger$log(\"Detailed information\", level = \"DEBUG\")  # Log an error logger$log(\"An error occurred\", level = \"ERROR\")  # Use the logger in annotation results <- annotate_cell_types(   input = marker_data,   tissue_name = \"human PBMC\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\"),   debug = TRUE  # Enable detailed logging )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/08-advanced-features.html","id":"next-steps","dir":"Articles","previous_headings":"Advanced Features & Case Studies","what":"Next Steps","title":"Advanced Features & Case Studies","text":"Now ’ve explored advanced features mLLMCelltype, can: Contribute project: Learn contribute mLLMCelltype Review version history: Explore development history package Return introduction: Review basic concepts","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"contributing-to-mllmcelltype","dir":"Articles","previous_headings":"","what":"Contributing to mLLMCelltype","title":"Contributing Guide","text":"Thank interest contributing mLLMCelltype! guide help understand contribute project effectively.","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"fork-and-clone-the-repository","dir":"Articles","previous_headings":"Contributing to mLLMCelltype > Getting Started","what":"Fork and Clone the Repository","title":"Contributing Guide","text":"Fork mLLMCelltype repository GitHub Clone fork local machine: Add original repository upstream remote:","code":"git clone https://github.com/YOUR-USERNAME/mLLMCelltype.git cd mLLMCelltype git remote add upstream https://github.com/cafferychen777/mLLMCelltype.git"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"setting-up-the-development-environment","dir":"Articles","previous_headings":"Contributing to mLLMCelltype > Getting Started","what":"Setting Up the Development Environment","title":"Contributing Guide","text":"R package development:","code":"# Install required packages for development install.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"knitr\", \"rmarkdown\"))  # Install the package in development mode devtools::install_dev(\"R\")"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"project-structure","dir":"Articles","previous_headings":"Contributing to mLLMCelltype","what":"Project Structure","title":"Contributing Guide","text":"mLLMCelltype project following structure:","code":"mLLMCelltype/ ├── R/                  # R package source code │   ├── R/              # R functions │   ├── man/            # Documentation │   ├── tests/          # Unit tests │   ├── vignettes/      # Package vignettes │   └── DESCRIPTION     # Package metadata ├── python/             # Python package source code ├── .github/            # GitHub workflows and templates ├── assets/             # Images and other assets ├── examples/           # Example notebooks and scripts └── README.md           # Project overview"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"creating-a-new-feature","dir":"Articles","previous_headings":"Contributing to mLLMCelltype > Development Workflow","what":"Creating a New Feature","title":"Contributing Guide","text":"Create new branch feature: Make changes codebase Add commit changes: Push changes fork: Create pull request fork main repository","code":"git checkout -b feature/your-feature-name git add . git commit -m \"Add your descriptive commit message here\" git push origin feature/your-feature-name"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"r-code-style","dir":"Articles","previous_headings":"Contributing to mLLMCelltype > Development Workflow > Code Style Guidelines","what":"R Code Style","title":"Contributing Guide","text":"follow tidyverse style guide R code: Use snake_case variable function names Use spaces around operators commas Use 2 spaces indentation Limit line length 80 characters Use roxygen2 documentation Example properly formatted R code:","code":"#' Annotate Cell Types #' #' This function annotates cell types based on marker genes. #' #' @param input A data frame containing marker genes. #' @param tissue_name The name of the tissue. #' @param model The LLM model to use. #' @param api_key The API key for the LLM provider. #' #' @return A vector of cell type annotations. #' @export annotate_cell_types <- function(input, tissue_name, model, api_key) {   # Function implementation   results <- process_markers(input, top_n = 10)    for (i in seq_along(results)) {     if (is_valid_result(results[i])) {       results[i] <- clean_result(results[i])     }   }    return(results) }"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"documentation-guidelines","dir":"Articles","previous_headings":"Contributing to mLLMCelltype > Development Workflow > Code Style Guidelines","what":"Documentation Guidelines","title":"Contributing Guide","text":"functions documented using roxygen2 following sections: Title (first line) Description (paragraph title) @param parameter @return return value @examples usage examples @export function exported","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"testing","dir":"Articles","previous_headings":"Contributing to mLLMCelltype > Development Workflow","what":"Testing","title":"Contributing Guide","text":"use testthat package testing. Tests placed R/tests/testthat/ directory. run tests: Example test file (test-annotate_cell_types.R):","code":"devtools::test() context(\"Cell type annotation\")  test_that(\"annotate_cell_types returns expected format\", {   # Setup test data   test_markers <- data.frame(     cluster = c(0, 0, 1, 1),     gene = c(\"CD3D\", \"CD3E\", \"CD19\", \"MS4A1\"),     avg_log2FC = c(2.5, 2.3, 3.1, 2.8),     p_val_adj = c(0.001, 0.002, 0.001, 0.003)   )    # Mock the API response   mockery::stub(     annotate_cell_types,     \"get_model_response\",     function(...) c(\"T cells\", \"B cells\")   )    # Run the function   result <- annotate_cell_types(     input = test_markers,     tissue_name = \"test tissue\",     model = \"test-model\",     api_key = \"test-key\"   )    # Assertions   expect_is(result, \"character\")   expect_length(result, 2)   expect_equal(result, c(\"T cells\", \"B cells\")) })"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"adding-support-for-new-llm-models","dir":"Articles","previous_headings":"Contributing to mLLMCelltype > Contributing Areas","what":"Adding Support for New LLM Models","title":"Contributing Guide","text":"add support new LLM model: Identify model provider API endpoint Create new processing function R/R/process_[provider].R Update get_provider() function R/R/get_provider.R Add model supported models list Create tests new model Update documentation Example adding new model:","code":"# In process_newprovider.R process_newprovider <- function(prompt, api_key) {   # Implementation for the new provider   url <- \"https://api.newprovider.com/v1/completions\"    headers <- c(     \"Content-Type\" = \"application/json\",     \"Authorization\" = paste(\"Bearer\", api_key)   )    body <- list(     model = \"newprovider-model\",     prompt = prompt,     max_tokens = 1000,     temperature = 0.1   )    # Make API request using httr   response <- httr::POST(     url = url,     httr::add_headers(.headers = headers),     body = jsonlite::toJSON(body, auto_unbox = TRUE),     encode = \"json\"   )    # Check for HTTP errors   httr::stop_for_status(response)    # Parse the response   content <- httr::content(response, \"text\", encoding = \"UTF-8\")   parsed_response <- jsonlite::fromJSON(content)   result <- parsed_response$choices[[1]]$text    return(result) }  # In get_provider.R get_provider <- function(model) {   # Add to the model mapping   model_mapping <- list(     # Existing models...     \"newprovider-model\" = \"newprovider\"   )    provider <- model_mapping[[model]]   if (is.null(provider)) {     stop(\"Unsupported model: \", model)   }    return(provider) }"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"improving-documentation","dir":"Articles","previous_headings":"Contributing to mLLMCelltype > Contributing Areas","what":"Improving Documentation","title":"Contributing Guide","text":"Documentation improvements always welcome: Update function documentation roxygen2 Improve vignettes examples explanations Add tutorials specific use cases Fix typos clarify existing documentation","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"adding-new-features","dir":"Articles","previous_headings":"Contributing to mLLMCelltype > Contributing Areas","what":"Adding New Features","title":"Contributing Guide","text":"ideas new features: Integration additional single-cell analysis frameworks Support spatial transcriptomics data Interactive visualization tools Batch processing large datasets Performance optimizations","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"reporting-issues","dir":"Articles","previous_headings":"Contributing to mLLMCelltype > Contributing Areas","what":"Reporting Issues","title":"Contributing Guide","text":"reporting issues, please include: minimal reproducible example version mLLMCelltype ’re using error message unexpected behavior R session information (sessionInfo())","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"pull-request-process","dir":"Articles","previous_headings":"Contributing to mLLMCelltype","what":"Pull Request Process","title":"Contributing Guide","text":"Ensure code follows style guidelines Add update tests necessary Update documentation reflect changes Ensure tests pass Submit pull request clear description changes","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"code-review-process","dir":"Articles","previous_headings":"Contributing to mLLMCelltype","what":"Code Review Process","title":"Contributing Guide","text":"pull requests reviewed maintainers. review process includes: Checking code follows style guidelines Verifying tests pass Ensuring documentation updated Evaluating overall design implementation","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"release-process","dir":"Articles","previous_headings":"Contributing to mLLMCelltype","what":"Release Process","title":"Contributing Guide","text":"mLLMCelltype follows semantic versioning (MAJOR.MINOR.PATCH): MAJOR version incompatible API changes MINOR version new functionality backward-compatible manner PATCH version backward-compatible bug fixes","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"code-of-conduct","dir":"Articles","previous_headings":"Contributing to mLLMCelltype > Community Guidelines","what":"Code of Conduct","title":"Contributing Guide","text":"follow code conduct ensure welcoming inclusive community: respectful inclusive collaborative open feedback Focus best solution community","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"communication-channels","dir":"Articles","previous_headings":"Contributing to mLLMCelltype > Community Guidelines","what":"Communication Channels","title":"Contributing Guide","text":"GitHub Issues: bug reports, feature requests, discussions GitHub Discussions: general questions community discussions Pull Requests: code contributions","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"acknowledgment","dir":"Articles","previous_headings":"Contributing to mLLMCelltype","what":"Acknowledgment","title":"Contributing Guide","text":"Contributors acknowledged package documentation README.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"license","dir":"Articles","previous_headings":"Contributing to mLLMCelltype","what":"License","title":"Contributing Guide","text":"contributing mLLMCelltype, agree contributions licensed license project (MIT License).","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/09-contributing-guide.html","id":"next-steps","dir":"Articles","previous_headings":"Contributing to mLLMCelltype","what":"Next Steps","title":"Contributing Guide","text":"Now know contribute mLLMCelltype, can: Review version history understand recent changes Explore advanced features identify areas improvement Check FAQ see common questions might need better documentation","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"version-history-changelog","dir":"Articles","previous_headings":"","what":"Version History & Changelog","title":"Version History & Changelog","text":"document tracks development history mLLMCelltype, including major releases, feature additions, bug fixes, significant changes.","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"initial-release","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.0.0 (2023-11-15)","what":"Initial Release","title":"Version History & Changelog","text":"First public release mLLMCelltype Core functionality cell type annotation using LLMs Support OpenAI (GPT-3.5, GPT-4) Anthropic (Claude) models Basic consensus mechanism Integration Seurat","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"features","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.1.0 (2024-01-20)","what":"Features","title":"Version History & Changelog","text":"Added support Google’s Gemini models Implemented structured deliberation process controversial clusters Added uncertainty quantification consensus proportion Shannon entropy Improved caching system API responses Added Python implementation","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"bug-fixes","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.1.0 (2024-01-20)","what":"Bug Fixes","title":"Version History & Changelog","text":"Fixed issue marker gene sorting Corrected handling cluster indices Improved error messages API failures","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"documentation","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.1.0 (2024-01-20)","what":"Documentation","title":"Version History & Changelog","text":"Added comprehensive README Created example notebooks Added function documentation","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"features-1","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.2.0 (2024-03-10)","what":"Features","title":"Version History & Changelog","text":"Added support DeepSeek, Qwen, Zhipu models Implemented hierarchical annotation capability Added visualization functions uncertainty metrics Improved handling rate limits API errors Added batch processing large datasets","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"bug-fixes-1","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.2.0 (2024-03-10)","what":"Bug Fixes","title":"Version History & Changelog","text":"Fixed consensus calculation edge cases Corrected handling empty API responses Improved error handling network issues","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"documentation-1","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.2.0 (2024-03-10)","what":"Documentation","title":"Version History & Changelog","text":"Added benchmarking results Updated examples new models Expanded troubleshooting guide","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"features-2","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.3.0 (2024-05-15)","what":"Features","title":"Version History & Changelog","text":"Added support Stepfun, MiniMax, OpenRouter models Implemented custom prompt templates Added provider-specific parameter customization Improved performance parallel processing Enhanced caching persistent storage","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"bug-fixes-2","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.3.0 (2024-05-15)","what":"Bug Fixes","title":"Version History & Changelog","text":"Fixed issue discussion logs formatting Corrected handling special characters marker genes Improved robustness API changes","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"documentation-2","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.3.0 (2024-05-15)","what":"Documentation","title":"Version History & Changelog","text":"Added case studies different tissue types Created advanced usage guide Updated installation instructions dependencies","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"features-3","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.4.0 (2024-07-01)","what":"Features","title":"Version History & Changelog","text":"Added support Grok models X.AI Updated Claude model support include Claude 3.7 Sonnet Updated Gemini model support include Gemini 2.5 Pro Improved consensus mechanism weighted voting Enhanced visualization capabilities Added support spatial transcriptomics data","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"bug-fixes-3","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.4.0 (2024-07-01)","what":"Bug Fixes","title":"Version History & Changelog","text":"Fixed consensus result printing controversial clusters Corrected model mapping Claude 3.7 Sonnet Fixed undefined variable issue consensus validation Improved Seurat object integration","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"documentation-3","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.4.0 (2024-07-01)","what":"Documentation","title":"Version History & Changelog","text":"Created comprehensive documentation website pkgdown Added new vignettes specific use cases Updated examples latest models","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"bug-fixes-4","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.4.1 (2024-07-15)","what":"Bug Fixes","title":"Version History & Changelog","text":"Fixed issue printing consensus results controversial clusters Corrected model mapping anthropic.py properly use Claude 3.7 Sonnet Fixed undefined has_names variable consensus validation Improved test_pbmc3k.R added .gitignore prevent API key leakage","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"documentation-4","dir":"Articles","previous_headings":"Version History & Changelog > Version 1.4.1 (2024-07-15)","what":"Documentation","title":"Version History & Changelog","text":"Updated model lists documentation Clarified API key setup instructions Improved error messages common issues","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"upcoming-features","dir":"Articles","previous_headings":"Version History & Changelog","what":"Upcoming Features","title":"Version History & Changelog","text":"following features planned future releases:","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"version-1-5-0-planned","dir":"Articles","previous_headings":"Version History & Changelog > Upcoming Features","what":"Version 1.5.0 (Planned)","title":"Version History & Changelog","text":"Integration additional single-cell analysis frameworks Enhanced support multi-modal data Improved performance large datasets Advanced visualization tools Expanded benchmarking across diverse tissues species","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"version-2-0-0-planned","dir":"Articles","previous_headings":"Version History & Changelog > Upcoming Features","what":"Version 2.0.0 (Planned)","title":"Version History & Changelog","text":"Complete redesign consensus mechanism Integration reference-based methods Support custom model fine-tuning Interactive web interface annotation review Comprehensive benchmarking framework","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"breaking-changes","dir":"Articles","previous_headings":"Version History & Changelog","what":"Breaking Changes","title":"Version History & Changelog","text":"section documents breaking changes may require updates code.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"version-1-2-0","dir":"Articles","previous_headings":"Version History & Changelog > Breaking Changes","what":"Version 1.2.0","title":"Version History & Changelog","text":"Changed default value top_gene_count 5 10 Modified return structure interactive_consensus_annotation() include additional metadata Renamed uncertainty_score shannon_entropy clarity","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"version-1-3-0","dir":"Articles","previous_headings":"Version History & Changelog > Breaking Changes","what":"Version 1.3.0","title":"Version History & Changelog","text":"Changed API custom model registration Modified caching system use different file structure Updated required R version 4.0.0 higher","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"version-1-4-0","dir":"Articles","previous_headings":"Version History & Changelog > Breaking Changes","what":"Version 1.4.0","title":"Version History & Changelog","text":"Changed default models used examples Claude 3.7 Gemini 2.5 Modified return structure annotate_cell_types() include metadata Updated required package versions several dependencies","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"deprecation-notices","dir":"Articles","previous_headings":"Version History & Changelog","what":"Deprecation Notices","title":"Version History & Changelog","text":"following features deprecated removed future versions: simple_consensus() function (since v1.2.0): Use interactive_consensus_annotation() instead basic_visualization() function (since v1.3.0): Use new visualization functions instead Support older model versions gradually phased providers retire ","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"acknowledgments","dir":"Articles","previous_headings":"Version History & Changelog","what":"Acknowledgments","title":"Version History & Changelog","text":"like thank contributors helped improve mLLMCelltype: Core developers: Chen Yang, [List core developers] Contributors: [List contributors] Users reported issues suggested improvements","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"how-to-cite","dir":"Articles","previous_headings":"Version History & Changelog","what":"How to Cite","title":"Version History & Changelog","text":"use mLLMCelltype research, please cite:","code":"Yang, C., et al. (2024). mLLMCelltype: Multi-LLM Consensus Architecture for Robust Cell Type Annotation. bioRxiv 2024.04.10.647852; doi: https://doi.org/10.1101/2024.04.10.647852"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"feedback-and-contributions","dir":"Articles","previous_headings":"Version History & Changelog","what":"Feedback and Contributions","title":"Version History & Changelog","text":"welcome feedback contributions improve mLLMCelltype. Please see Contributing Guide details contribute.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/10-version-history.html","id":"next-steps","dir":"Articles","previous_headings":"Version History & Changelog","what":"Next Steps","title":"Version History & Changelog","text":"Now ’ve reviewed version history, can: Return introduction get started mLLMCelltype Explore advanced features learn latest capabilities Check FAQ answers common questions","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/mLLMCelltype.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to mLLMCelltype","text":"mLLMCelltype R package leverages various large language models (LLMs) automated cell type annotation single-cell RNA sequencing data. implements consensus-based approach multiple LLMs collaborate provide reliable annotations. details, please refer paper: https://www.biorxiv.org/content/10.1101/2025.04.10.647852v1.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/mLLMCelltype.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to mLLMCelltype","text":"can install released version mLLMCelltype CRAN: install development version GitHub:","code":"install.packages(\"mLLMCelltype\") # install.packages(\"devtools\") devtools::install_github(\"cafferychen777/mLLMCelltype\")"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/mLLMCelltype.html","id":"setting-up-api-keys","dir":"Articles","previous_headings":"","what":"Setting Up API Keys","title":"Introduction to mLLMCelltype","text":"using mLLMCelltype, need set API keys LLMs want use. package supports multiple LLM providers including OpenAI, Anthropic, Google (Gemini), X.AI (Grok).","code":"# Set API keys (recommended to use .Renviron or .env file) # OpenAI API key Sys.setenv(OPENAI_API_KEY = \"your-openai-api-key\")  # Anthropic API key Sys.setenv(ANTHROPIC_API_KEY = \"your-anthropic-api-key\")  # Google API key Sys.setenv(GOOGLE_API_KEY = \"your-google-api-key\")  # X.AI API key Sys.setenv(XAI_API_KEY = \"your-xai-api-key\")  # Alternatively, use .env file # dotenv::load_dot_env()"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/mLLMCelltype.html","id":"annotating-cell-types-with-seurat-object","dir":"Articles","previous_headings":"Basic Usage","what":"Annotating Cell Types with Seurat Object","title":"Introduction to mLLMCelltype","text":"main function mLLMCelltype annotate cell types Seurat object:","code":"# Load required packages library(mLLMCelltype) library(Seurat) library(dplyr)  # Load your preprocessed Seurat object # pbmc <- readRDS(\"your_seurat_object.rds\")  # Find marker genes for each cluster # pbmc_markers <- FindAllMarkers(pbmc, #                           only.pos = TRUE, #                           min.pct = 0.25, #                           logfc.threshold = 0.25)  # Set up cache directory to speed up processing cache_dir <- \"./mllmcelltype_cache\" dir.create(cache_dir, showWarnings = FALSE, recursive = TRUE)  # Run LLMCelltype annotation with multiple LLM models consensus_results <- interactive_consensus_annotation(   input = pbmc_markers,   tissue_name = \"human PBMC\",  # provide tissue context   models = c(     \"claude-3-7-sonnet-20250219\",  # Anthropic     \"gpt-4o\",                   # OpenAI     \"gemini-2.5-pro\"            # Google   ),   api_keys = list(     anthropic = Sys.getenv(\"ANTHROPIC_API_KEY\"),     openai = Sys.getenv(\"OPENAI_API_KEY\"),     gemini = Sys.getenv(\"GOOGLE_API_KEY\")   ),   top_gene_count = 10,   controversy_threshold = 1.0,   entropy_threshold = 1.0,   cache_dir = cache_dir )  # Add annotations to Seurat object # Get cell type annotations from consensus_results$final_annotations cluster_to_celltype_map <- consensus_results$final_annotations  # Create new cell type identifier column cell_types <- as.character(Idents(pbmc)) for (cluster_id in names(cluster_to_celltype_map)) {   cell_types[cell_types == cluster_id] <- cluster_to_celltype_map[[cluster_id]] }  # Add cell types to Seurat object pbmc$mLLM_cell_type <- cell_types"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/mLLMCelltype.html","id":"visualizing-results","dir":"Articles","previous_headings":"Basic Usage","what":"Visualizing Results","title":"Introduction to mLLMCelltype","text":"","code":"# Plot UMAP with cell type annotations library(Seurat) library(ggplot2) library(cowplot)  # Basic visualization p1 <- DimPlot(pbmc, group.by = \"mLLM_cell_type\", label = TRUE) +   ggtitle(\"mLLMCelltype Consensus Annotations\")  # Visualize consensus proportion (confidence metric) pbmc$consensus_proportion <- 0 for (cluster_id in names(consensus_results$initial_results$consensus_results)) {   cluster_cells <- which(Idents(pbmc) == cluster_id)   pbmc$consensus_proportion[cluster_cells] <-      consensus_results$initial_results$consensus_results[[cluster_id]]$consensus_proportion }  p2 <- FeaturePlot(pbmc, features = \"consensus_proportion\",                   min.cutoff = 0, max.cutoff = 1) +   scale_color_gradientn(colors = c(\"blue\", \"green\", \"red\")) +   ggtitle(\"Consensus Proportion\") +   theme(legend.position = \"right\")  # Print consensus summary print_consensus_summary(consensus_results)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/mLLMCelltype.html","id":"supported-models","dir":"Articles","previous_headings":"","what":"Supported Models","title":"Introduction to mLLMCelltype","text":"mLLMCelltype supports various LLM models: OpenAI: gpt-4o, gpt-4o-mini, gpt-4.1, gpt-4.1-mini, gpt-4.1-nano, gpt-4-turbo, gpt-3.5-turbo, o1, o1-mini, o1-preview, o1-pro Anthropic: claude-3-7-sonnet-20250219, claude-3-5-sonnet-latest, claude-3-5-haiku-latest, claude-3-opus DeepSeek: deepseek-chat, deepseek-reasoner Google: gemini-2.5-pro, gemini-2.0-flash, gemini-2.0-flash-exp, gemini-1.5-pro, gemini-1.5-flash Qwen: qwen-max-2025-01-25 Stepfun: step-2-mini, step-2-16k, step-1-8k Zhipu: glm-4-plus, glm-3-turbo MiniMax: minimax-text-01 Grok: grok-3, grok-3-latest, grok-3-fast, grok-3-fast-latest, grok-3-mini, grok-3-mini-latest, grok-3-mini-fast, grok-3-mini-fast-latest OpenRouter: Access models multiple providers single API","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/mLLMCelltype.html","id":"using-a-single-llm-model","dir":"Articles","previous_headings":"Advanced Usage","what":"Using a Single LLM Model","title":"Introduction to mLLMCelltype","text":"want use single LLM model instead consensus approach:","code":"# Run annotation with a single model single_model_results <- annotate_with_single_model(   input = pbmc_markers,   tissue_name = \"human PBMC\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\"),   top_gene_count = 10,   cache_dir = cache_dir )  # Add annotations to Seurat object pbmc$single_model_cell_type <- plyr::mapvalues(   x = as.character(Idents(pbmc)),   from = as.character(0:(length(single_model_results)-1)),   to = single_model_results )  # Visualize results DimPlot(pbmc, group.by = \"single_model_cell_type\", label = TRUE) +   ggtitle(\"Cell Types Annotated by Single LLM Model\")"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/mLLMCelltype.html","id":"customizing-consensus-parameters","dir":"Articles","previous_headings":"Advanced Usage","what":"Customizing Consensus Parameters","title":"Introduction to mLLMCelltype","text":"","code":"# Customize consensus parameters custom_consensus_results <- interactive_consensus_annotation(   input = pbmc_markers,   tissue_name = \"human PBMC\",   models = c(\"claude-3-7-sonnet-20250219\", \"gpt-4o\", \"gemini-2.5-pro\"),   api_keys = list(     anthropic = Sys.getenv(\"ANTHROPIC_API_KEY\"),     openai = Sys.getenv(\"OPENAI_API_KEY\"),     gemini = Sys.getenv(\"GOOGLE_API_KEY\")   ),   top_gene_count = 15,                # Number of top marker genes to use   controversy_threshold = 0.7,        # Threshold for controversy detection   entropy_threshold = 0.7,            # Entropy threshold for controversy detection   max_discussion_rounds = 2,          # Maximum rounds of discussion   cache_dir = cache_dir )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/mLLMCelltype.html","id":"using-custom-providers","dir":"Articles","previous_headings":"Advanced Usage","what":"Using Custom Providers","title":"Introduction to mLLMCelltype","text":"can register custom LLM providers:","code":"# Register a custom provider register_custom_provider(   provider_name = \"my_custom_provider\",   process_function = my_process_function,   models = c(\"my-model-1\", \"my-model-2\") )  # Use the custom provider results <- annotate_cell_types(   seurat_obj = seurat_obj,   models = c(\"my-model-1\", \"claude-3-7-sonnet-20250219\"),   # other parameters )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/mLLMCelltype.html","id":"caching-results","dir":"Articles","previous_headings":"","what":"Caching Results","title":"Introduction to mLLMCelltype","text":"mLLMCelltype includes caching system save API costs:","code":"# Enable caching Sys.setenv(MLLM_CACHE_ENABLED = \"TRUE\")  # Set cache directory Sys.setenv(MLLM_CACHE_DIR = \"path/to/cache\")  # Clear cache if needed clear_cache()"},{"path":"https://cafferychen777.github.io/mLLMCelltype/articles/mLLMCelltype.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to mLLMCelltype","text":"mLLMCelltype provides powerful flexible framework automated cell type annotation using large language models. leveraging consensus multiple models, achieves reliable annotations single-model approaches. bug reports feature requests, please visit: https://github.com/cafferychen777/mLLMCelltype/issues.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chen Yang. Author, maintainer.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yang, C., Zhang, X., & Chen, J. (2025). Large Language Model Consensus Substantially Improves Cell Type Annotation Accuracy scRNA-seq Data. bioRxiv. https://doi.org/10.1101/2025.04.10.647852","code":"@Article{,   title = {Large Language Model Consensus Substantially Improves the Cell Type Annotation Accuracy for scRNA-seq Data},   author = {Chen Yang and Xianyang Zhang and Jun Chen},   journal = {bioRxiv},   year = {2025},   url = {https://www.biorxiv.org/content/early/2025/04/17/2025.04.10.647852},   doi = {10.1101/2025.04.10.647852},   publisher = {Cold Spring Harbor Laboratory}, }"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/index.html","id":"multi-llm-consensus-architecture-for-cell-type-annotation-in-scrna-seq-data","dir":"","previous_headings":"","what":"Multi-LLM Consensus Architecture for Cell Type Annotation in scRNA-seq Data","title":"mLLMCelltype","text":"mLLMCelltype R package leverages various large language models (LLMs) automated cell type annotation single-cell RNA sequencing data. package implements multi-LLM consensus architecture multiple LLMs collaborate structured deliberation provide reliable annotations single model achieve alone.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/index.html","id":"key-features","dir":"","previous_headings":"Multi-LLM Consensus Architecture for Cell Type Annotation in scRNA-seq Data","what":"Key Features","title":"mLLMCelltype","text":"Multi-LLM Consensus Mechanism: Harnesses collective intelligence diverse LLMs overcome single-model limitations biases Structured Deliberation Process: controversial clusters, LLMs engage collaborative discussion across multiple rounds, evaluating evidence refining annotations together Uncertainty Quantification: Explicitly quantifies annotation uncertainty consensus proportion Shannon entropy Reference Dataset Required: rely pre-existing reference datasets, can annotate various tissues species OpenAI (GPT-4o, GPT-4.1, GPT-3.5-Turbo, O1 series) Anthropic (Claude 3.7 Sonnet, Claude 3.5 Sonnet/Haiku/Opus) Google (Gemini 2.5 Pro, Gemini 2.0, Gemini 1.5 series) X.AI (Grok-3, Grok-3 Fast, Grok-3 Mini series) DeepSeek (DeepSeek Chat, DeepSeek Reasoner) Qwen (Qwen Max) Zhipu (GLM-4 Plus, GLM-3 Turbo) MiniMax (MiniMax Text) Stepfun (Step-2, Step-1 series) OpenRouter (access Meta Llama, Mistral, Microsoft, Perplexity, Cohere, ) Seamless Integration Seurat: Can directly use Seurat’s FindAllMarkers() output input","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/index.html","id":"quick-start","dir":"","previous_headings":"Multi-LLM Consensus Architecture for Cell Type Annotation in scRNA-seq Data","what":"Quick Start","title":"mLLMCelltype","text":"","code":"# Install the package devtools::install_github(\"cafferychen777/mLLMCelltype\", subdir = \"R\")  # Load the package library(mLLMCelltype)  # Set API keys Sys.setenv(ANTHROPIC_API_KEY = \"your-anthropic-api-key\") Sys.setenv(OPENAI_API_KEY = \"your-openai-api-key\") Sys.setenv(GEMINI_API_KEY = \"your-gemini-api-key\")  # Use multiple models for annotation models <- c(   \"claude-3-7-sonnet-20250219\",   \"gpt-4o\",   \"gemini-2.5-pro\" )  # Run multi-model annotation results <- list() for (model in models) {   provider <- get_provider(model)   api_key <- switch(provider,                    \"anthropic\" = Sys.getenv(\"ANTHROPIC_API_KEY\"),                    \"openai\" = Sys.getenv(\"OPENAI_API_KEY\"),                    \"gemini\" = Sys.getenv(\"GEMINI_API_KEY\"))      results[[model]] <- annotate_cell_types(     input = pbmc_markers,     tissue_name = \"human PBMC\",     model = model,     api_key = api_key   ) }  # Create consensus consensus_results <- create_consensus(   results = results,   input = pbmc_markers,   tissue_name = \"human PBMC\",   model = \"claude-3-7-sonnet-20250219\",   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\") )  # Print consensus results summary print_consensus_summary(consensus_results)"},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/index.html","id":"citation","dir":"","previous_headings":"Multi-LLM Consensus Architecture for Cell Type Annotation in scRNA-seq Data","what":"Citation","title":"mLLMCelltype","text":"use mLLMCelltype research, please cite paper: can also cite plain text format: Yang, C., Zhang, X., & Chen, J. (2025). Large Language Model Consensus Substantially Improves Cell Type Annotation Accuracy scRNA-seq Data. bioRxiv. https://doi.org/10.1101/2025.04.10.647852","code":"@article{Yang2025.04.10.647852,   author = {Chen Yang and Xianyang Zhang and Jun Chen},   title = {Large Language Model Consensus Substantially Improves the Cell Type Annotation Accuracy for scRNA-seq Data},   elocation-id = {2025.04.10.647852},   year = {2025},   doi = {10.1101/2025.04.10.647852},   publisher = {Cold Spring Harbor Laboratory},   URL = {https://www.biorxiv.org/content/early/2025/04/17/2025.04.10.647852},   journal = {bioRxiv} }"},{"path":"https://cafferychen777.github.io/mLLMCelltype/index.html","id":"learn-more","dir":"","previous_headings":"Multi-LLM Consensus Architecture for Cell Type Annotation in scRNA-seq Data","what":"Learn More","title":"mLLMCelltype","text":"Please check documentation learn mLLMCelltype.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":null,"dir":"Reference","previous_headings":"","what":"Cache Manager Class — CacheManager","title":"Cache Manager Class — CacheManager","text":"Manages caching consensus analysis results","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Cache Manager Class — CacheManager","text":"cache_dir Directory store cache files cache_version Current cache version","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Cache Manager Class — CacheManager","text":"CacheManager$new() CacheManager$generate_key() CacheManager$save_to_cache() CacheManager$load_from_cache() CacheManager$has_cache() CacheManager$get_cache_stats() CacheManager$clear_cache() CacheManager$validate_cache() CacheManager$clone()","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Cache Manager Class — CacheManager","text":"Initialize cache manager","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache Manager Class — CacheManager","text":"","code":"CacheManager$new(cache_dir = \"consensus_cache\")"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache Manager Class — CacheManager","text":"cache_dir Directory store cache files","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"method-generate-key-","dir":"Reference","previous_headings":"","what":"Method generate_key()","title":"Cache Manager Class — CacheManager","text":"Generate cache key input parameters","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache Manager Class — CacheManager","text":"","code":"CacheManager$generate_key(input, models, cluster_id)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache Manager Class — CacheManager","text":"input Input data models Models used cluster_id Cluster ID","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Cache Manager Class — CacheManager","text":"Cache key string","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"method-save-to-cache-","dir":"Reference","previous_headings":"","what":"Method save_to_cache()","title":"Cache Manager Class — CacheManager","text":"Save results cache","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache Manager Class — CacheManager","text":"","code":"CacheManager$save_to_cache(key, data)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache Manager Class — CacheManager","text":"key Cache key data Data cache","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"method-load-from-cache-","dir":"Reference","previous_headings":"","what":"Method load_from_cache()","title":"Cache Manager Class — CacheManager","text":"Load results cache","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache Manager Class — CacheManager","text":"","code":"CacheManager$load_from_cache(key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache Manager Class — CacheManager","text":"key Cache key","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Cache Manager Class — CacheManager","text":"Cached data exists, NULL otherwise","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"method-has-cache-","dir":"Reference","previous_headings":"","what":"Method has_cache()","title":"Cache Manager Class — CacheManager","text":"Check results exist cache","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache Manager Class — CacheManager","text":"","code":"CacheManager$has_cache(key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache Manager Class — CacheManager","text":"key Cache key","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Cache Manager Class — CacheManager","text":"TRUE cached results exist","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"method-get-cache-stats-","dir":"Reference","previous_headings":"","what":"Method get_cache_stats()","title":"Cache Manager Class — CacheManager","text":"Get cache statistics","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache Manager Class — CacheManager","text":"","code":"CacheManager$get_cache_stats()"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Cache Manager Class — CacheManager","text":"list cache statistics","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"method-clear-cache-","dir":"Reference","previous_headings":"","what":"Method clear_cache()","title":"Cache Manager Class — CacheManager","text":"Clear cache","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache Manager Class — CacheManager","text":"","code":"CacheManager$clear_cache(confirm = FALSE)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache Manager Class — CacheManager","text":"confirm Boolean, TRUE, clear cache without confirmation","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"method-validate-cache-","dir":"Reference","previous_headings":"","what":"Method validate_cache()","title":"Cache Manager Class — CacheManager","text":"Validate cache content","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache Manager Class — CacheManager","text":"","code":"CacheManager$validate_cache(key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache Manager Class — CacheManager","text":"key Cache key","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Cache Manager Class — CacheManager","text":"TRUE cache valid, FALSE otherwise","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Cache Manager Class — CacheManager","text":"objects class cloneable method.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache Manager Class — CacheManager","text":"","code":"CacheManager$clone(deep = FALSE)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/CacheManager.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache Manager Class — CacheManager","text":"deep Whether make deep clone.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":null,"dir":"Reference","previous_headings":"","what":"Logger class for cell type annotation discussions — DiscussionLogger","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"Logger class cell type annotation discussions Logger class cell type annotation discussions","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"log_dir Directory storing log files current_log Current log file handle session_id Unique identifier current session","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"DiscussionLogger$new() DiscussionLogger$start_cluster_discussion() DiscussionLogger$log_entry() DiscussionLogger$log_prediction() DiscussionLogger$log_consensus_check() DiscussionLogger$log_final_consensus() DiscussionLogger$end_cluster_discussion() DiscussionLogger$clone()","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"Initialize new logger","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"","code":"DiscussionLogger$new(base_dir = \"logs\")"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"base_dir Base directory logs","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"method-start-cluster-discussion-","dir":"Reference","previous_headings":"","what":"Method start_cluster_discussion()","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"Start logging new cluster discussion","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"","code":"DiscussionLogger$start_cluster_discussion(   cluster_id,   tissue_name = NULL,   marker_genes )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"cluster_id Cluster identifier tissue_name Tissue name marker_genes List marker genes","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"method-log-entry-","dir":"Reference","previous_headings":"","what":"Method log_entry()","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"Log discussion entry","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"","code":"DiscussionLogger$log_entry(event_type, content)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"event_type Type event content Content log","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"method-log-prediction-","dir":"Reference","previous_headings":"","what":"Method log_prediction()","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"Log model's prediction","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"","code":"DiscussionLogger$log_prediction(model_name, round_number, prediction)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"model_name Name model round_number Discussion round number prediction Model's prediction reasoning","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"method-log-consensus-check-","dir":"Reference","previous_headings":"","what":"Method log_consensus_check()","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"Log consensus check results","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"","code":"DiscussionLogger$log_consensus_check(   round_number,   reached_consensus,   consensus_proportion,   entropy = NULL )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"round_number Round number reached_consensus Whether consensus reached consensus_proportion Proportion models supporting majority prediction entropy Shannon entropy predictions (optional)","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"method-log-final-consensus-","dir":"Reference","previous_headings":"","what":"Method log_final_consensus()","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"Log final consensus result","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"","code":"DiscussionLogger$log_final_consensus(final_cell_type, summary)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"final_cell_type Final determined cell type summary Summary discussion","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"method-end-cluster-discussion-","dir":"Reference","previous_headings":"","what":"Method end_cluster_discussion()","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"End current cluster discussion close log file","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"","code":"DiscussionLogger$end_cluster_discussion()"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"objects class cloneable method.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"","code":"DiscussionLogger$clone(deep = FALSE)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/DiscussionLogger.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logger class for cell type annotation discussions — DiscussionLogger","text":"deep Whether make deep clone.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/annotate_cell_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell Type Annotation with Multi-LLM Framework — annotate_cell_types","title":"Cell Type Annotation with Multi-LLM Framework — annotate_cell_types","text":"comprehensive function automated cell type annotation using multiple Large Language Models (LLMs). function supports Seurat's differential gene expression results custom gene lists input. implements sophisticated annotation pipeline leverages state---art LLMs identify cell types based marker gene expression patterns.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/annotate_cell_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell Type Annotation with Multi-LLM Framework — annotate_cell_types","text":"","code":"annotate_cell_types(   input,   tissue_name = NULL,   model = \"gpt-4o\",   api_key = NA,   top_gene_count = 10,   debug = FALSE )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/annotate_cell_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cell Type Annotation with Multi-LLM Framework — annotate_cell_types","text":"input One following: data frame Seurat's FindAllMarkers() function containing differential gene expression results (must columns: 'cluster', 'gene', 'avg_log2FC'). function select top genes based avg_log2FC cluster. list element 'genes' field containing marker genes cluster. can one formats: Named cluster IDs: list(\"0\" = list(genes = c(...)), \"1\" = list(genes = c(...))) Named cell type names: list(t_cells = list(genes = c(...)), b_cells = list(genes = c(...))) Unnamed list: list(list(genes = c(...)), list(genes = c(...))) input types, cluster IDs numeric start 1, automatically converted 0-based indexing (e.g., cluster 1 becomes cluster 0) consistency. tissue_name Character string specifying tissue type cell source (e.g., 'human PBMC', 'mouse brain'). helps provide context accurate annotations. model Character string specifying LLM model use. Supported models: OpenAI: 'gpt-4o', 'o1' Anthropic: 'claude-3-7-sonnet-20250219', 'claude-3-5-sonnet-latest', 'claude-3-5-haiku-latest', 'claude-3-opus' DeepSeek: 'deepseek-chat', 'deepseek-reasoner' Google: 'gemini-2.0-flash', 'gemini-2.0-flash-exp', 'gemini-1.5-pro', 'gemini-1.5-flash' Alibaba: 'qwen-max-2025-01-25' Stepfun: 'step-2-16k', 'step-2-mini', 'step-1-8k' Zhipu: 'glm-4-plus', 'glm-3-turbo' MiniMax: 'minimax-text-01' X.AI: 'grok-3-latest', 'grok-3', 'grok-3-fast', 'grok-3-fast-latest', 'grok-3-mini', 'grok-3-mini-latest', 'grok-3-mini-fast', 'grok-3-mini-fast-latest' OpenRouter: Provides access models multiple providers single API. Format: 'provider/model-name' OpenAI models: 'openai/gpt-4o', 'openai/gpt-4o-mini', 'openai/gpt-4-turbo', 'openai/gpt-4', 'openai/gpt-3.5-turbo' Anthropic models: 'anthropic/claude-3-7-sonnet-20250219', 'anthropic/claude-3-5-sonnet-latest', 'anthropic/claude-3-5-haiku-latest', 'anthropic/claude-3-opus' Meta models: 'meta-llama/llama-3-70b-instruct', 'meta-llama/llama-3-8b-instruct', 'meta-llama/llama-2-70b-chat' Google models: 'google/gemini-2.5-pro-preview-03-25', 'google/gemini-1.5-pro-latest', 'google/gemini-1.5-flash' Mistral models: 'mistralai/mistral-large', 'mistralai/mistral-medium', 'mistralai/mistral-small' models: 'microsoft/mai-ds-r1', 'perplexity/sonar-small-chat', 'cohere/command-r', 'deepseek/deepseek-chat', 'thudm/glm-z1-32b' api_key Character string containing API key selected model. provider requires specific API key format authentication method: OpenAI: \"sk-...\" (obtain https://platform.openai.com/api-keys) Anthropic: \"sk-ant-...\" (obtain https://console.anthropic.com/keys) Google: Google API key Gemini models (obtain https://ai.google.dev/) DeepSeek: API key DeepSeek platform Qwen: API key Alibaba Cloud Stepfun: API key Stepfun AI Zhipu: API key Zhipu AI MiniMax: API key MiniMax X.AI: API key Grok models OpenRouter: \"sk--...\" (obtain https://openrouter.ai/keys) OpenRouter provides access multiple models single API key API key can provided directly stored environment variables:   NA, returns generated prompt without making API call, useful reviewing prompt sending API. top_gene_count Integer specifying number top marker genes use per cluster. debug Logical. TRUE, prints additional debugging information execution. input Seurat's FindAllMarkers(). Default: 10","code":"# Direct API key result <- annotate_cell_types(input, tissue_name, model=\"gpt-4o\",                              api_key=\"sk-...\")  # Using environment variables Sys.setenv(OPENAI_API_KEY=\"sk-...\") Sys.setenv(ANTHROPIC_API_KEY=\"sk-ant-...\") Sys.setenv(OPENROUTER_API_KEY=\"sk-or-...\")  # Then use with environment variables result <- annotate_cell_types(input, tissue_name, model=\"claude-3-opus\",                              api_key=Sys.getenv(\"ANTHROPIC_API_KEY\"))"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/annotate_cell_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cell Type Annotation with Multi-LLM Framework — annotate_cell_types","text":"character vector containing: api_key provided: One cell type annotation per cluster, order input clusters api_key NA: generated prompt string sent LLM","code":""},{"path":[]},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/annotate_cell_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cell Type Annotation with Multi-LLM Framework — annotate_cell_types","text":"","code":"# Example 1: Using custom gene lists, returning prompt only (no API call) annotate_cell_types(   input = list(     t_cells = list(genes = c('CD3D', 'CD3E', 'CD3G', 'CD28')),     b_cells = list(genes = c('CD19', 'CD79A', 'CD79B', 'MS4A1')),     monocytes = list(genes = c('CD14', 'CD68', 'CSF1R', 'FCGR3A'))   ),   tissue_name = 'human PBMC',   model = 'gpt-4o',   api_key = NA  # Returns prompt only without making API call ) #> [2025-04-28 20:11:10] Processing input with Model: gpt-4o (Provider: openai) #> DEBUG: Formatted lines for prompt: #> [2025-04-28 20:11:10]  #> Gene lists for each cluster: #> [2025-04-28 20:11:10] Cluster t_cells: CD3D, CD3E, CD3G, CD28 #> [2025-04-28 20:11:10] Cluster b_cells: CD19, CD79A, CD79B, MS4A1 #> [2025-04-28 20:11:10] Cluster monocytes: CD14, CD68, CSF1R, FCGR3A #> [2025-04-28 20:11:10]  #> Generated prompt: #> [2025-04-28 20:11:10] You are a cell type annotation expert. Below are marker genes for different cell clusters in human PBMC. #>  #>  #>  #> For each numbered cluster, provide only the cell type name in a new line, without any explanation. #> [1] \"You are a cell type annotation expert. Below are marker genes for different cell clusters in human PBMC.\\n\\n\\n\\nFor each numbered cluster, provide only the cell type name in a new line, without any explanation.\"  # Example 2: Using with Seurat pipeline and OpenAI model if (FALSE) { # \\dontrun{ library(Seurat)  # Load example data data(\"pbmc_small\")  # Find marker genes all.markers <- FindAllMarkers(   object = pbmc_small,   only.pos = TRUE,   min.pct = 0.25,   logfc.threshold = 0.25 )  # Set API key in environment variable (recommended approach) Sys.setenv(OPENAI_API_KEY = \"your-openai-api-key\")  # Get cell type annotations using OpenAI model openai_annotations <- annotate_cell_types(   input = all.markers,   tissue_name = 'human PBMC',   model = 'gpt-4o',   api_key = Sys.getenv(\"OPENAI_API_KEY\"),   top_gene_count = 15 )  # Example 3: Using Anthropic Claude model Sys.setenv(ANTHROPIC_API_KEY = \"your-anthropic-api-key\")  claude_annotations <- annotate_cell_types(   input = all.markers,   tissue_name = 'human PBMC',   model = 'claude-3-opus',   api_key = Sys.getenv(\"ANTHROPIC_API_KEY\"),   top_gene_count = 15 )  # Example 4: Using OpenRouter to access multiple models Sys.setenv(OPENROUTER_API_KEY = \"your-openrouter-api-key\")  # Access OpenAI models through OpenRouter openrouter_gpt4_annotations <- annotate_cell_types(   input = all.markers,   tissue_name = 'human PBMC',   model = 'openai/gpt-4o',  # Note the provider/model format   api_key = Sys.getenv(\"OPENROUTER_API_KEY\"),   top_gene_count = 15 )  # Access Anthropic models through OpenRouter openrouter_claude_annotations <- annotate_cell_types(   input = all.markers,   tissue_name = 'human PBMC',   model = 'anthropic/claude-3-opus',  # Note the provider/model format   api_key = Sys.getenv(\"OPENROUTER_API_KEY\"),   top_gene_count = 15 )  # Example 5: Using with mouse brain data mouse_annotations <- annotate_cell_types(   input = mouse_markers,  # Your mouse marker genes   tissue_name = 'mouse brain',  # Specify correct tissue for context   model = 'gpt-4o',   api_key = Sys.getenv(\"OPENAI_API_KEY\"),   top_gene_count = 20,  # Use more genes for complex tissues   debug = TRUE  # Enable debug output ) } # }"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/check_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if consensus is reached among models — check_consensus","title":"Check if consensus is reached among models — check_consensus","text":"Check consensus reached among models","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/check_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if consensus is reached among models — check_consensus","text":"","code":"check_consensus(   round_responses,   api_keys = NULL,   controversy_threshold = 2/3,   entropy_threshold = 1,   consensus_check_model = NULL )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/check_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if consensus is reached among models — check_consensus","text":"round_responses vector model responses check consensus api_keys list API keys different providers controversy_threshold Threshold consensus proportion (default: 2/3) entropy_threshold Threshold entropy (default: 1.0) consensus_check_model Model use consensus checking (default: NULL, try available models order)","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/check_consensus.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if consensus is reached among models — check_consensus","text":"function uses create_consensus_check_prompt prompt_templates.R","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/clean_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean annotation text by removing prefixes and extra whitespace — clean_annotation","title":"Clean annotation text by removing prefixes and extra whitespace — clean_annotation","text":"Clean annotation text removing prefixes extra whitespace","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/clean_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean annotation text by removing prefixes and extra whitespace — clean_annotation","text":"","code":"clean_annotation(annotation)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/clean_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean annotation text by removing prefixes and extra whitespace — clean_annotation","text":"annotation annotation text clean","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/clean_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean annotation text by removing prefixes and extra whitespace — clean_annotation","text":"Cleaned annotation text","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/combine_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine results from all phases of consensus annotation — combine_results","title":"Combine results from all phases of consensus annotation — combine_results","text":"Combine results phases consensus annotation","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/combine_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine results from all phases of consensus annotation — combine_results","text":"","code":"combine_results(   initial_results,   controversy_results,   discussion_results,   logger )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/combine_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine results from all phases of consensus annotation — combine_results","text":"initial_results Results initial prediction phase controversy_results Results controversy identification phase discussion_results Results discussion phase logger Logger object","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/combine_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine results from all phases of consensus annotation — combine_results","text":"Combined results","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/compare_model_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare predictions from different models — compare_model_predictions","title":"Compare predictions from different models — compare_model_predictions","text":"function runs input multiple models compares predictions. provides individual predictions consensus analysis.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/compare_model_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare predictions from different models — compare_model_predictions","text":"","code":"compare_model_predictions(   input,   tissue_name,   models = c(\"claude-3-7-sonnet-20250219\", \"claude-3-5-sonnet-latest\",     \"claude-3-5-haiku-latest\", \"deepseek-reasoner\", \"deepseek-chat\", \"gemini-2.0-flash\",     \"gemini-1.5-pro\", \"qwen-max-2025-01-25\", \"gpt-4o\", \"o1\", \"grok-3-latest\"),   api_keys,   top_gene_count = 10,   consensus_threshold = 0.5 )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/compare_model_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare predictions from different models — compare_model_predictions","text":"input Either differential gene table returned Seurat FindAllMarkers() function, list genes. tissue_name Required. tissue type cell source (e.g., 'human PBMC', 'mouse brain', etc.). models Vector model names compare. Default includes one model provider. Supported models: OpenAI: 'gpt-4o', 'o1' Anthropic: 'claude-3-7-sonnet-20250219', 'claude-3-5-sonnet-latest', 'claude-3-5-haiku-latest', 'claude-3-opus' DeepSeek: 'deepseek-chat', 'deepseek-reasoner' Google: 'gemini-2.0-flash', 'gemini-2.0-flash-exp', 'gemini-1.5-pro', 'gemini-1.5-flash' Alibaba: 'qwen-max-2025-01-25' Stepfun: 'step-2-16k', 'step-2-mini', 'step-1-8k' Zhipu: 'glm-4-plus', 'glm-3-turbo' MiniMax: 'minimax-text-01' X.AI: 'grok-3-latest', 'grok-3', 'grok-3-fast', 'grok-3-fast-latest', 'grok-3-mini', 'grok-3-mini-latest', 'grok-3-mini-fast', 'grok-3-mini-fast-latest' OpenRouter: Provides access models multiple providers single API. Format: 'provider/model-name' OpenAI models: 'openai/gpt-4o', 'openai/gpt-4o-mini', 'openai/gpt-4-turbo', 'openai/gpt-4', 'openai/gpt-3.5-turbo' Anthropic models: 'anthropic/claude-3-7-sonnet-20250219', 'anthropic/claude-3-5-sonnet-latest', 'anthropic/claude-3-5-haiku-latest', 'anthropic/claude-3-opus' Meta models: 'meta-llama/llama-3-70b-instruct', 'meta-llama/llama-3-8b-instruct', 'meta-llama/llama-2-70b-chat' Google models: 'google/gemini-2.5-pro-preview-03-25', 'google/gemini-1.5-pro-latest', 'google/gemini-1.5-flash' Mistral models: 'mistralai/mistral-large', 'mistralai/mistral-medium', 'mistralai/mistral-small' models: 'microsoft/mai-ds-r1', 'perplexity/sonar-small-chat', 'cohere/command-r', 'deepseek/deepseek-chat', 'thudm/glm-z1-32b' api_keys Named list API keys. Can provided two formats: provider names keys: list(\"openai\" = \"sk-...\", \"anthropic\" = \"sk-ant-...\", \"openrouter\" = \"sk--...\") model names keys: list(\"gpt-4o\" = \"sk-...\", \"claude-3-opus\" = \"sk-ant-...\") system first tries find API key using provider name. found, tries using model name. Example:   top_gene_count Number top differential genes used input Seurat differential genes. consensus_threshold Minimum proportion models must agree consensus (default 0.5).","code":"api_keys <- list(   \"openai\" = Sys.getenv(\"OPENAI_API_KEY\"),   \"anthropic\" = Sys.getenv(\"ANTHROPIC_API_KEY\"),   \"openrouter\" = Sys.getenv(\"OPENROUTER_API_KEY\"),   \"claude-3-opus\" = \"sk-ant-api03-specific-key-for-opus\" )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/compare_model_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare predictions from different models — compare_model_predictions","text":"list containing individual predictions, consensus results, agreement statistics.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/compare_model_predictions.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compare predictions from different models — compare_model_predictions","text":"function uses create_standardization_prompt prompt_templates.R","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/compare_model_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare predictions from different models — compare_model_predictions","text":"","code":"if (FALSE) { # \\dontrun{ # Compare predictions using different models api_keys <- list(   \"claude-3-5-sonnet-latest\" = \"your-anthropic-key\",   \"deepseek-reasoner\" = \"your-deepseek-key\",   \"gemini-1.5-pro\" = \"your-gemini-key\",   \"qwen-max-2025-01-25\" = \"your-qwen-key\" )  results <- compare_model_predictions(   input = list(gs1=c('CD4','CD3D'), gs2='CD14'),   tissue_name = 'PBMC',   api_keys = api_keys ) } # }"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_annotation_prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Prompt templates for mLLMCelltype — create_annotation_prompt","title":"Prompt templates for mLLMCelltype — create_annotation_prompt","text":"file contains prompt template functions used mLLMCelltype. functions create various prompts different stages cell type annotation process. Create prompt cell type annotation","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_annotation_prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prompt templates for mLLMCelltype — create_annotation_prompt","text":"","code":"create_annotation_prompt(input, tissue_name, top_gene_count = 10)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_annotation_prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prompt templates for mLLMCelltype — create_annotation_prompt","text":"input Either differential gene table returned Seurat FindAllMarkers() function, list genes tissue_name name tissue top_gene_count Number top differential genes use per cluster","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_annotation_prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prompt templates for mLLMCelltype — create_annotation_prompt","text":"list containing prompt string expected count responses","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_consensus_check_prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create prompt for checking consensus among model predictions — create_consensus_check_prompt","title":"Create prompt for checking consensus among model predictions — create_consensus_check_prompt","text":"Create prompt checking consensus among model predictions","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_consensus_check_prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create prompt for checking consensus among model predictions — create_consensus_check_prompt","text":"","code":"create_consensus_check_prompt(   round_responses,   controversy_threshold = 2/3,   entropy_threshold = 1 )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_consensus_check_prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create prompt for checking consensus among model predictions — create_consensus_check_prompt","text":"round_responses vector cell type predictions different models controversy_threshold Threshold consensus proportion (default: 2/3) entropy_threshold Threshold entropy (default: 1.0)","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_consensus_check_prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create prompt for checking consensus among model predictions — create_consensus_check_prompt","text":"formatted prompt string consensus checking","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_discussion_prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create prompt for additional discussion rounds — create_discussion_prompt","title":"Create prompt for additional discussion rounds — create_discussion_prompt","text":"Create prompt additional discussion rounds","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_discussion_prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create prompt for additional discussion rounds — create_discussion_prompt","text":"","code":"create_discussion_prompt(   cluster_id,   cluster_genes,   tissue_name,   previous_rounds,   round_number )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_discussion_prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create prompt for additional discussion rounds — create_discussion_prompt","text":"cluster_id ID cluster analyzed cluster_genes marker genes cluster tissue_name name tissue (optional) previous_rounds list previous discussion rounds round_number current round number","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_discussion_prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create prompt for additional discussion rounds — create_discussion_prompt","text":"formatted prompt string additional discussion rounds","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_initial_discussion_prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create prompt for the initial round of discussion — create_initial_discussion_prompt","title":"Create prompt for the initial round of discussion — create_initial_discussion_prompt","text":"Create prompt initial round discussion","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_initial_discussion_prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create prompt for the initial round of discussion — create_initial_discussion_prompt","text":"","code":"create_initial_discussion_prompt(   cluster_id,   cluster_genes,   tissue_name,   initial_predictions )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_initial_discussion_prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create prompt for the initial round of discussion — create_initial_discussion_prompt","text":"cluster_id ID cluster analyzed cluster_genes marker genes cluster tissue_name name tissue (optional) initial_predictions list initial model predictions","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_initial_discussion_prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create prompt for the initial round of discussion — create_initial_discussion_prompt","text":"formatted prompt string initial discussion round","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_standardization_prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create prompt for standardizing cell type names — create_standardization_prompt","title":"Create prompt for standardizing cell type names — create_standardization_prompt","text":"Create prompt standardizing cell type names","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_standardization_prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create prompt for standardizing cell type names — create_standardization_prompt","text":"","code":"create_standardization_prompt(all_cell_types)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_standardization_prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create prompt for standardizing cell type names — create_standardization_prompt","text":"all_cell_types vector cell type names standardize","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/create_standardization_prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create prompt for standardizing cell type names — create_standardization_prompt","text":"formatted prompt string cell type standardization","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/custom_providers.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom model manager for mLLMCelltype — custom_providers","title":"Custom model manager for mLLMCelltype — custom_providers","text":"module provides functionality register manage custom LLM providers models. allows users integrate LLM services mLLMCelltype framework.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/custom_providers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom model manager for mLLMCelltype — custom_providers","text":"","code":"custom_providers"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/custom_providers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Custom model manager for mLLMCelltype — custom_providers","text":"object class environment length 0.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/facilitate_cluster_discussion.html","id":null,"dir":"Reference","previous_headings":"","what":"Facilitate discussion for a controversial cluster — facilitate_cluster_discussion","title":"Facilitate discussion for a controversial cluster — facilitate_cluster_discussion","text":"Facilitate discussion controversial cluster","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/facilitate_cluster_discussion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facilitate discussion for a controversial cluster — facilitate_cluster_discussion","text":"","code":"facilitate_cluster_discussion(   cluster_id,   input,   tissue_name,   models,   api_keys,   initial_predictions,   top_gene_count,   max_rounds = 3,   controversy_threshold = 0.7,   entropy_threshold = 1,   consensus_check_model = NULL,   logger )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/facilitate_cluster_discussion.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Facilitate discussion for a controversial cluster — facilitate_cluster_discussion","text":"function uses create_initial_discussion_prompt create_discussion_prompt prompt_templates.R","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions for API key management — get_api_key","title":"Utility functions for API key management — get_api_key","text":"file contains utility functions managing API keys related operations. Get API key specific model","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions for API key management — get_api_key","text":"","code":"get_api_key(model, api_keys)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions for API key management — get_api_key","text":"model name model get API key api_keys Named list API keys","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility functions for API key management — get_api_key","text":"API key found, NULL otherwise","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_api_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility functions for API key management — get_api_key","text":"function retrieves appropriate API key given model first checking provider name model name provided API keys list.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_initial_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get initial predictions from all models — get_initial_predictions","title":"Get initial predictions from all models — get_initial_predictions","text":"function retrieves initial cell type predictions specified models. internal helper function used interactive_consensus_annotation function.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_initial_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get initial predictions from all models — get_initial_predictions","text":"","code":"get_initial_predictions(   input,   tissue_name,   models,   api_keys,   top_gene_count,   logger )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_initial_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get initial predictions from all models — get_initial_predictions","text":"input Either differential gene table list genes tissue_name tissue type cell source models Vector model names use api_keys Named list API keys top_gene_count Number top differential genes use logger Logger object recording messages","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_initial_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get initial predictions from all models — get_initial_predictions","text":"list containing individual predictions successful models","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_model_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Get response from a specific model — get_model_response","title":"Get response from a specific model — get_model_response","text":"Get response specific model","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_model_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get response from a specific model — get_model_response","text":"","code":"get_model_response(prompt, model, api_key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_provider.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine provider from model name — get_provider","title":"Determine provider from model name — get_provider","text":"function determines appropriate provider (e.g., OpenAI, Anthropic, Google, OpenRouter) based model name.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_provider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine provider from model name — get_provider","text":"","code":"get_provider(model)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_provider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine provider from model name — get_provider","text":"model Character string specifying model name check","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_provider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine provider from model name — get_provider","text":"Character string provider name","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/get_provider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine provider from model name — get_provider","text":"Supported providers models include: OpenAI: 'gpt-4o', 'gpt-4o-mini', 'gpt-4.1', 'gpt-4.1-mini', 'gpt-4.1-nano', 'gpt-4-turbo', 'gpt-3.5-turbo', 'o1', 'o1-mini', 'o1-preview', 'o1-pro' Anthropic: 'claude-3-7-sonnet-20250219', 'claude-3-5-sonnet-latest', 'claude-3-5-haiku-latest', 'claude-3-opus' DeepSeek: 'deepseek-chat', 'deepseek-reasoner' Google: 'gemini-2.5-pro', 'gemini-2.0-flash', 'gemini-2.0-flash-exp', 'gemini-1.5-pro', 'gemini-1.5-flash' Qwen: 'qwen-max-2025-01-25' Stepfun: 'step-2-mini', 'step-2-16k', 'step-1-8k' Zhipu: 'glm-4-plus', 'glm-3-turbo' MiniMax: 'minimax-text-01' Grok: 'grok-3', 'grok-3-latest', 'grok-3-fast', 'grok-3-fast-latest', 'grok-3-mini', 'grok-3-mini-latest', 'grok-3-mini-fast', 'grok-3-mini-fast-latest' OpenRouter: Provides access models multiple providers single API. Format: 'provider/model-name' OpenAI models: 'openai/gpt-4o', 'openai/gpt-4o-mini', 'openai/gpt-4-turbo', 'openai/gpt-4', 'openai/gpt-3.5-turbo' Anthropic models: 'anthropic/claude-3-7-sonnet-20250219', 'anthropic/claude-3-5-sonnet-latest', 'anthropic/claude-3-5-haiku-latest', 'anthropic/claude-3-opus' Meta models: 'meta-llama/llama-3-70b-instruct', 'meta-llama/llama-3-8b-instruct', 'meta-llama/llama-2-70b-chat' Google models: 'google/gemini-2.5-pro-preview-03-25', 'google/gemini-1.5-pro-latest', 'google/gemini-1.5-flash' Mistral models: 'mistralai/mistral-large', 'mistralai/mistral-medium', 'mistralai/mistral-small' models: 'microsoft/mai-ds-r1', 'perplexity/sonar-small-chat', 'cohere/command-r', 'deepseek/deepseek-chat', 'thudm/glm-z1-32b'","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/identify_controversial_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify controversial clusters based on consensus analysis — identify_controversial_clusters","title":"Identify controversial clusters based on consensus analysis — identify_controversial_clusters","text":"Identify controversial clusters based consensus analysis","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/identify_controversial_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify controversial clusters based on consensus analysis — identify_controversial_clusters","text":"","code":"identify_controversial_clusters(   input,   individual_predictions,   controversy_threshold,   entropy_threshold,   api_keys,   logger,   consensus_check_model = NULL )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/identify_controversial_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify controversial clusters based on consensus analysis — identify_controversial_clusters","text":"input Either differential gene table list genes individual_predictions List predictions model controversy_threshold Threshold marking clusters controversial entropy_threshold Entropy threshold identifying controversial clusters logger Logger object recording messages","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/identify_controversial_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify controversial clusters based on consensus analysis — identify_controversial_clusters","text":"list containing controversial clusters consensus results","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/interactive_consensus_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive consensus building for cell type annotation — interactive_consensus_annotation","title":"Interactive consensus building for cell type annotation — interactive_consensus_annotation","text":"function implements interactive voting discussion mechanism multiple LLMs collaborate reach consensus cell type annotations, particularly focusing clusters low agreement. process includes: Initial voting LLMs Identification controversial clusters Detailed discussion controversial clusters Final summary designated LLM (default: Claude) function implements interactive voting discussion mechanism multiple LLMs collaborate reach consensus cell type annotations, particularly focusing clusters low agreement. process includes: Initial voting LLMs Identification controversial clusters Detailed discussion controversial clusters Final summary designated LLM (default: Claude)","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/interactive_consensus_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive consensus building for cell type annotation — interactive_consensus_annotation","text":"","code":"interactive_consensus_annotation(   input,   tissue_name = NULL,   models = c(\"claude-3-7-sonnet-20250219\", \"claude-3-5-sonnet-latest\",     \"claude-3-5-haiku-latest\", \"gemini-2.0-flash\", \"gemini-1.5-pro\",     \"qwen-max-2025-01-25\", \"gpt-4o\", \"grok-3-latest\"),   api_keys,   top_gene_count = 10,   controversy_threshold = 0.7,   entropy_threshold = 1,   max_discussion_rounds = 3,   consensus_check_model = NULL,   log_dir = \"logs\",   cache_dir = \"consensus_cache\",   use_cache = TRUE )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/interactive_consensus_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive consensus building for cell type annotation — interactive_consensus_annotation","text":"input One following: data frame Seurat's FindAllMarkers() function containing differential gene expression results (must columns: 'cluster', 'gene', 'avg_log2FC'). function select top genes based avg_log2FC cluster. list element 'genes' field containing marker genes cluster. can one formats: Named cluster IDs: list(\"0\" = list(genes = c(...)), \"1\" = list(genes = c(...))) Named cell type names: list(t_cells = list(genes = c(...)), b_cells = list(genes = c(...))) Unnamed list: list(list(genes = c(...)), list(genes = c(...))) input types, cluster IDs numeric start 1, automatically converted 0-based indexing (e.g., cluster 1 becomes cluster 0) consistency. tissue_name Optional input tissue name models Vector model names participate discussion. Supported models: OpenAI: 'gpt-4o', 'o1' Anthropic: 'claude-3-7-sonnet-20250219', 'claude-3-5-sonnet-latest', 'claude-3-5-haiku-latest', 'claude-3-opus' DeepSeek: 'deepseek-chat', 'deepseek-reasoner' Google: 'gemini-2.0-flash', 'gemini-2.0-flash-exp', 'gemini-1.5-pro', 'gemini-1.5-flash' Alibaba: 'qwen-max-2025-01-25' Stepfun: 'step-2-16k', 'step-2-mini', 'step-1-8k' Zhipu: 'glm-4-plus', 'glm-3-turbo' MiniMax: 'minimax-text-01' X.AI: 'grok-3-latest', 'grok-3', 'grok-3-fast', 'grok-3-fast-latest', 'grok-3-mini', 'grok-3-mini-latest', 'grok-3-mini-fast', 'grok-3-mini-fast-latest' OpenRouter: Provides access models multiple providers single API. Format: 'provider/model-name' OpenAI models: 'openai/gpt-4o', 'openai/gpt-4o-mini', 'openai/gpt-4-turbo', 'openai/gpt-4', 'openai/gpt-3.5-turbo' Anthropic models: 'anthropic/claude-3-7-sonnet-20250219', 'anthropic/claude-3-5-sonnet-latest', 'anthropic/claude-3-5-haiku-latest', 'anthropic/claude-3-opus' Meta models: 'meta-llama/llama-3-70b-instruct', 'meta-llama/llama-3-8b-instruct', 'meta-llama/llama-2-70b-chat' Google models: 'google/gemini-2.5-pro-preview-03-25', 'google/gemini-1.5-pro-latest', 'google/gemini-1.5-flash' Mistral models: 'mistralai/mistral-large', 'mistralai/mistral-medium', 'mistralai/mistral-small' models: 'microsoft/mai-ds-r1', 'perplexity/sonar-small-chat', 'cohere/command-r', 'deepseek/deepseek-chat', 'thudm/glm-z1-32b' api_keys Named list API keys. Can provided two formats: provider names keys: list(\"openai\" = \"sk-...\", \"anthropic\" = \"sk-ant-...\", \"openrouter\" = \"sk--...\") model names keys: list(\"gpt-4o\" = \"sk-...\", \"claude-3-opus\" = \"sk-ant-...\") system first tries find API key using provider name. found, tries using model name. Example:   top_gene_count Number top differential genes use controversy_threshold Consensus proportion threshold (default: 0.7). Clusters consensus proportion value marked controversial entropy_threshold Entropy threshold identifying controversial clusters (default: 1.0) max_discussion_rounds Maximum number discussion rounds controversial clusters (default: 3) consensus_check_model Model use consensus checking log_dir Directory storing logs cache_dir Directory storing cache use_cache Whether use cached results","code":"api_keys <- list(   \"openai\" = Sys.getenv(\"OPENAI_API_KEY\"),   \"anthropic\" = Sys.getenv(\"ANTHROPIC_API_KEY\"),   \"openrouter\" = Sys.getenv(\"OPENROUTER_API_KEY\"),   \"claude-3-opus\" = \"sk-ant-api03-specific-key-for-opus\" )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/interactive_consensus_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive consensus building for cell type annotation — interactive_consensus_annotation","text":"list containing consensus results, logs, annotations list containing consensus results, logs, annotations","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/list_custom_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of registered custom models — list_custom_models","title":"Get list of registered custom models — list_custom_models","text":"Get list registered custom models","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/list_custom_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of registered custom models — list_custom_models","text":"","code":"list_custom_models()"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/list_custom_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of registered custom models — list_custom_models","text":"Character vector model names","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/list_custom_providers.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of registered custom providers — list_custom_providers","title":"Get list of registered custom providers — list_custom_providers","text":"Get list registered custom providers","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/list_custom_providers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of registered custom providers — list_custom_providers","text":"","code":"list_custom_providers()"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/list_custom_providers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of registered custom providers — list_custom_providers","text":"Character vector provider names","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/print_consensus_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary of consensus results — print_consensus_summary","title":"Print summary of consensus results — print_consensus_summary","text":"function prints detailed summary consensus building process, including initial predictions models, uncertainty metrics, final consensus controversial cluster.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/print_consensus_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary of consensus results — print_consensus_summary","text":"","code":"print_consensus_summary(results)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/print_consensus_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary of consensus results — print_consensus_summary","text":"results list containing consensus annotation results following components: initial_results: list containing individual_predictions, consensus_results, controversial_clusters final_annotations: list final cell type annotations cluster controversial_clusters: character vector cluster IDs controversial discussion_logs: list discussion logs controversial cluster","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/print_consensus_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary of consensus results — print_consensus_summary","text":"None, prints summary console","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_anthropic.html","id":null,"dir":"Reference","previous_headings":"","what":"Process request using Anthropic models — process_anthropic","title":"Process request using Anthropic models — process_anthropic","text":"Process request using Anthropic models","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_anthropic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process request using Anthropic models — process_anthropic","text":"","code":"process_anthropic(prompt, model, api_key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_controversial_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Process controversial clusters through discussion — process_controversial_clusters","title":"Process controversial clusters through discussion — process_controversial_clusters","text":"Process controversial clusters discussion","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_controversial_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process controversial clusters through discussion — process_controversial_clusters","text":"","code":"process_controversial_clusters(   controversial_clusters,   input,   tissue_name,   successful_models,   api_keys,   individual_predictions,   top_gene_count,   controversy_threshold,   entropy_threshold,   max_discussion_rounds,   logger,   cache_manager,   use_cache,   consensus_check_model = NULL )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_controversial_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process controversial clusters through discussion — process_controversial_clusters","text":"controversial_clusters List controversial cluster IDs input Either differential gene table list genes tissue_name tissue type cell source successful_models Vector successful model names api_keys Named list API keys individual_predictions List predictions model top_gene_count Number top differential genes use controversy_threshold Threshold marking clusters controversial max_discussion_rounds Maximum number discussion rounds controversial clusters logger Logger object recording messages cache_manager Cache manager object use_cache Whether use cached results","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_controversial_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process controversial clusters through discussion — process_controversial_clusters","text":"list containing discussion logs final annotations","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Process request using custom provider — process_custom","title":"Process request using custom provider — process_custom","text":"Process request using custom provider","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process request using custom provider — process_custom","text":"","code":"process_custom(prompt, model, api_key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_deepseek.html","id":null,"dir":"Reference","previous_headings":"","what":"Process request using DeepSeek models — process_deepseek","title":"Process request using DeepSeek models — process_deepseek","text":"Process request using DeepSeek models","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_deepseek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process request using DeepSeek models — process_deepseek","text":"","code":"process_deepseek(prompt, model, api_key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_gemini.html","id":null,"dir":"Reference","previous_headings":"","what":"Process request using Gemini models — process_gemini","title":"Process request using Gemini models — process_gemini","text":"Process request using Gemini models","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_gemini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process request using Gemini models — process_gemini","text":"","code":"process_gemini(prompt, model, api_key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_grok.html","id":null,"dir":"Reference","previous_headings":"","what":"Process request using X.AI Grok models — process_grok","title":"Process request using X.AI Grok models — process_grok","text":"Process request using X.AI Grok models","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_grok.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process request using X.AI Grok models — process_grok","text":"","code":"process_grok(prompt, model, api_key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_grok.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process request using X.AI Grok models — process_grok","text":"prompt prompt send Grok API model Grok model use api_key API key X.AI Grok","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_grok.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process request using X.AI Grok models — process_grok","text":"response Grok API","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_minimax.html","id":null,"dir":"Reference","previous_headings":"","what":"Process request using MiniMax models Note: Model names are case-insensitive, but we use lowercase by convention (e.g., ","title":"Process request using MiniMax models Note: Model names are case-insensitive, but we use lowercase by convention (e.g., ","text":"Process request using MiniMax models Note: Model names case-insensitive, use lowercase convention (e.g., \"minimax-text-01\")","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_minimax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process request using MiniMax models Note: Model names are case-insensitive, but we use lowercase by convention (e.g., ","text":"","code":"process_minimax(prompt, model, api_key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_openai.html","id":null,"dir":"Reference","previous_headings":"","what":"Process request using OpenAI models — process_openai","title":"Process request using OpenAI models — process_openai","text":"Process request using OpenAI models","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_openai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process request using OpenAI models — process_openai","text":"","code":"process_openai(prompt, model, api_key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_openrouter.html","id":null,"dir":"Reference","previous_headings":"","what":"Process request using OpenRouter API — process_openrouter","title":"Process request using OpenRouter API — process_openrouter","text":"function processes annotation requests using OpenRouter API, provides access various LLM models including OpenAI, Anthropic, Meta, Google models. OpenRouter also offers free models :free suffix (e.g., 'meta-llama/llama-4-maverick:free').","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_openrouter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process request using OpenRouter API — process_openrouter","text":"","code":"process_openrouter(prompt, model, api_key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_openrouter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process request using OpenRouter API — process_openrouter","text":"prompt Character string containing prompt send API model Character string specifying model use (e.g., 'openai/gpt-4o' 'meta-llama/llama-4-maverick:free') api_key Character string containing OpenRouter API key","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_openrouter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process request using OpenRouter API — process_openrouter","text":"Character vector containing model's response","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_openrouter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process request using OpenRouter API — process_openrouter","text":"free models, use :free suffix model name. example: 'meta-llama/llama-4-maverick:free' - Meta Llama 4 Maverick (free) 'nvidia/llama-3.1-nemotron-ultra-253b-v1:free' - NVIDIA Nemotron Ultra 253B (free) 'deepseek/deepseek-chat-v3-0324:free' - DeepSeek Chat v3 (free) 'microsoft/mai-ds-r1:free' - Microsoft MAI-DS-R1 (free) Free models consume credits may limitations compared paid models.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_qwen.html","id":null,"dir":"Reference","previous_headings":"","what":"Process request using QWEN models — process_qwen","title":"Process request using QWEN models — process_qwen","text":"Process request using QWEN models","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_qwen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process request using QWEN models — process_qwen","text":"","code":"process_qwen(prompt, model, api_key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_stepfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Process request using Stepfun models — process_stepfun","title":"Process request using Stepfun models — process_stepfun","text":"Process request using Stepfun models","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_stepfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process request using Stepfun models — process_stepfun","text":"","code":"process_stepfun(prompt, model, api_key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_zhipu.html","id":null,"dir":"Reference","previous_headings":"","what":"Process request using Zhipu AI models — process_zhipu","title":"Process request using Zhipu AI models — process_zhipu","text":"Process request using Zhipu AI models","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/process_zhipu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process request using Zhipu AI models — process_zhipu","text":"","code":"process_zhipu(prompt, model, api_key)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/register_custom_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a custom model for a provider — register_custom_model","title":"Register a custom model for a provider — register_custom_model","text":"Register custom model provider","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/register_custom_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a custom model for a provider — register_custom_model","text":"","code":"register_custom_model(model_name, provider_name, model_config = list())"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/register_custom_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a custom model for a provider — register_custom_model","text":"model_name Character string, unique identifier model provider_name Character string, name registered provider model_config List model-specific configuration parameters","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/register_custom_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a custom model for a provider — register_custom_model","text":"Invisibly returns TRUE registration successful","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/register_custom_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a custom model for a provider — register_custom_model","text":"","code":"if (FALSE) { # \\dontrun{ register_custom_model(   model_name = \"my_model\",   provider_name = \"my_provider\",   model_config = list(     temperature = 0.7,     max_tokens = 2000   ) ) } # }"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/register_custom_provider.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a custom LLM provider — register_custom_provider","title":"Register a custom LLM provider — register_custom_provider","text":"Register custom LLM provider","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/register_custom_provider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a custom LLM provider — register_custom_provider","text":"","code":"register_custom_provider(provider_name, process_fn, description = NULL)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/register_custom_provider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a custom LLM provider — register_custom_provider","text":"provider_name Character string, unique identifier provider process_fn Function processes prompts returns responses. Must accept parameters: prompt, model, api_key description Optional description provider","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/register_custom_provider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a custom LLM provider — register_custom_provider","text":"Invisibly returns TRUE registration successful","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/register_custom_provider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a custom LLM provider — register_custom_provider","text":"","code":"if (FALSE) { # \\dontrun{ register_custom_provider(   provider_name = \"my_provider\",   process_fn = function(prompt, model, api_key) {     # Custom implementation     response <- httr::POST(       url = \"your_api_endpoint\",       body = list(prompt = prompt),       encode = \"json\"     )     return(httr::content(response)$choices[[1]]$text)   } ) } # }"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/select_best_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Select the best prediction from consensus results — select_best_prediction","title":"Select the best prediction from consensus results — select_best_prediction","text":"Select best prediction consensus results","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/select_best_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select the best prediction from consensus results — select_best_prediction","text":"","code":"select_best_prediction(consensus_result, valid_predictions)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/select_best_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select the best prediction from consensus results — select_best_prediction","text":"consensus_result Consensus analysis result valid_predictions Valid predictions cluster","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/select_best_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select the best prediction from consensus results — select_best_prediction","text":"best prediction","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/standardize_cell_type_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize cell type names using a language model — standardize_cell_type_names","title":"Standardize cell type names using a language model — standardize_cell_type_names","text":"function takes predictions multiple models standardizes cell type nomenclature ensure consistent naming across different models' outputs.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/standardize_cell_type_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize cell type names using a language model — standardize_cell_type_names","text":"","code":"standardize_cell_type_names(   predictions,   models,   api_keys,   standardization_model = \"claude-3-5-sonnet-latest\" )"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/standardize_cell_type_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize cell type names using a language model — standardize_cell_type_names","text":"predictions List predictions different models models Vector model names successfully completed predictions api_keys Named list API keys. Can provided two formats: provider names keys: list(\"openai\" = \"sk-...\", \"anthropic\" = \"sk-ant-...\", \"openrouter\" = \"sk--...\") model names keys: list(\"gpt-4o\" = \"sk-...\", \"claude-3-opus\" = \"sk-ant-...\") standardization_model Model use standardization (default: \"claude-3-5-sonnet-latest\")","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/standardize_cell_type_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize cell type names using a language model — standardize_cell_type_names","text":"List standardized predictions structure input","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/summarize_discussion.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize discussion and determine final cell type — summarize_discussion","title":"Summarize discussion and determine final cell type — summarize_discussion","text":"NOTE: function currently use. consensus_annotation.R file now directly extracts majority_prediction last round discussion. function kept potential future use reference.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/summarize_discussion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize discussion and determine final cell type — summarize_discussion","text":"","code":"summarize_discussion(discussion_log, cluster_id, model, api_key, logger = NULL)"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/summarize_discussion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize discussion and determine final cell type — summarize_discussion","text":"discussion_log Discussion log cluster cluster_id Cluster identifier model Model use summary api_key API key model logger Logger instance","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/summarize_discussion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize discussion and determine final cell type — summarize_discussion","text":"Final cell type determination","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/write_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Log Utility Function — write_log","title":"Write Log Utility Function — write_log","text":"function writes log messages file timestamps also prints console.","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/write_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Log Utility Function — write_log","text":"","code":"write_log(message, log_file = \"llm_celltype.log\")"},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/write_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Log Utility Function — write_log","text":"message Character string containing log message write log_file Character string specifying log file name (default: \"llm_celltype.log\")","code":""},{"path":"https://cafferychen777.github.io/mLLMCelltype/reference/write_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Log Utility Function — write_log","text":"None, used side effects","code":""}]
