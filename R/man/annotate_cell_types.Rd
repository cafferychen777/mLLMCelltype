% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cell_type_annotation.R
\name{annotate_cell_types}
\alias{annotate_cell_types}
\title{Cell Type Annotation with Multi-LLM Framework}
\usage{
annotate_cell_types(
  input,
  tissue_name = NULL,
  model = "gpt-4o",
  api_key = NA,
  top_gene_count = 10,
  debug = FALSE
)
}
\arguments{
\item{input}{One of the following:
\itemize{
\item A data frame from Seurat's FindAllMarkers() function containing differential gene expression results
\item A list where each element has a 'genes' field containing marker genes for a cluster
}}

\item{tissue_name}{Character string specifying the tissue type or cell source (e.g., 'human PBMC',
'mouse brain'). This helps provide context for more accurate annotations.}

\item{model}{Character string specifying the LLM model to use. Supported models:
\itemize{
\item OpenAI: 'gpt-4o', 'o1'
\item Anthropic: 'claude-3-7-sonnet-20250219', 'claude-3-5-sonnet-latest', 'claude-3-5-haiku-latest', 'claude-3-opus'
\item DeepSeek: 'deepseek-chat', 'deepseek-reasoner'
\item Google: 'gemini-2.0-flash', 'gemini-2.0-flash-exp', 'gemini-1.5-pro', 'gemini-1.5-flash'
\item Alibaba: 'qwen-max-2025-01-25'
\item Stepfun: 'step-2-16k', 'step-2-mini', 'step-1-8k'
\item Zhipu: 'glm-4-plus', 'glm-3-turbo'
\item MiniMax: 'minimax-text-01'
\item X.AI: 'grok-3-latest', 'grok-3', 'grok-3-fast', 'grok-3-fast-latest', 'grok-3-mini', 'grok-3-mini-latest', 'grok-3-mini-fast', 'grok-3-mini-fast-latest'
\item OpenRouter: Provides access to models from multiple providers through a single API. Format: 'provider/model-name'
\itemize{
\item OpenAI models: 'openai/gpt-4o', 'openai/gpt-4o-mini', 'openai/gpt-4-turbo', 'openai/gpt-4', 'openai/gpt-3.5-turbo'
\item Anthropic models: 'anthropic/claude-3-7-sonnet-20250219', 'anthropic/claude-3-5-sonnet-latest', 'anthropic/claude-3-5-haiku-latest', 'anthropic/claude-3-opus'
\item Meta models: 'meta-llama/llama-3-70b-instruct', 'meta-llama/llama-3-8b-instruct', 'meta-llama/llama-2-70b-chat'
\item Google models: 'google/gemini-2.5-pro-preview-03-25', 'google/gemini-1.5-pro-latest', 'google/gemini-1.5-flash'
\item Mistral models: 'mistralai/mistral-large', 'mistralai/mistral-medium', 'mistralai/mistral-small'
\item Other models: 'microsoft/mai-ds-r1', 'perplexity/sonar-small-chat', 'cohere/command-r', 'deepseek/deepseek-chat', 'thudm/glm-z1-32b'
}
}}

\item{api_key}{Character string containing the API key for the selected model.
Each provider requires a specific API key format and authentication method:
\itemize{
\item OpenAI: "sk-..." (obtain from https://platform.openai.com/api-keys)
\item Anthropic: "sk-ant-..." (obtain from https://console.anthropic.com/keys)
\item Google: A Google API key for Gemini models (obtain from https://ai.google.dev/)
\item DeepSeek: API key from DeepSeek platform
\item Qwen: API key from Alibaba Cloud
\item Stepfun: API key from Stepfun AI
\item Zhipu: API key from Zhipu AI
\item MiniMax: API key from MiniMax
\item X.AI: API key for Grok models
\item OpenRouter: "sk-or-..." (obtain from https://openrouter.ai/keys)
OpenRouter provides access to multiple models through a single API key
}

The API key can be provided directly or stored in environment variables:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{# Direct API key
result <- annotate_cell_types(input, tissue_name, model="gpt-4o", 
                             api_key="sk-...") 

# Using environment variables
Sys.setenv(OPENAI_API_KEY="sk-...")
Sys.setenv(ANTHROPIC_API_KEY="sk-ant-...")
Sys.setenv(OPENROUTER_API_KEY="sk-or-...")

# Then use with environment variables
result <- annotate_cell_types(input, tissue_name, model="claude-3-opus", 
                             api_key=Sys.getenv("ANTHROPIC_API_KEY"))
}\if{html}{\out{</div>}}

If NA, returns the generated prompt without making an API call, which is useful for
reviewing the prompt before sending it to the API.}

\item{top_gene_count}{Integer specifying the number of top marker genes to use per cluster.}

\item{debug}{Logical. If TRUE, prints additional debugging information during execution.
when input is from Seurat's FindAllMarkers(). Default: 10}
}
\value{
A character vector containing:
\itemize{
\item When api_key is provided: One cell type annotation per cluster, in the order of input clusters
\item When api_key is NA: The generated prompt string that would be sent to the LLM
}
}
\description{
A comprehensive function for automated cell type annotation using multiple Large Language Models (LLMs).
This function supports both Seurat's differential gene expression results and custom gene lists as input.
It implements a sophisticated annotation pipeline that leverages state-of-the-art LLMs to identify
cell types based on marker gene expression patterns.
}
\examples{
# Example 1: Using custom gene lists, returning prompt only (no API call)
annotate_cell_types(
  input = list(
    t_cells = list(genes = c('CD3D', 'CD3E', 'CD3G', 'CD28')),
    b_cells = list(genes = c('CD19', 'CD79A', 'CD79B', 'MS4A1')),
    monocytes = list(genes = c('CD14', 'CD68', 'CSF1R', 'FCGR3A'))
  ),
  tissue_name = 'human PBMC',
  model = 'gpt-4o',
  api_key = NA  # Returns prompt only without making API call
)

# Example 2: Using with Seurat pipeline and OpenAI model
\dontrun{
library(Seurat)

# Load example data
data("pbmc_small")

# Find marker genes
all.markers <- FindAllMarkers(
  object = pbmc_small,
  only.pos = TRUE,
  min.pct = 0.25,
  logfc.threshold = 0.25
)

# Set API key in environment variable (recommended approach)
Sys.setenv(OPENAI_API_KEY = "your-openai-api-key")

# Get cell type annotations using OpenAI model
openai_annotations <- annotate_cell_types(
  input = all.markers,
  tissue_name = 'human PBMC',
  model = 'gpt-4o',
  api_key = Sys.getenv("OPENAI_API_KEY"),
  top_gene_count = 15
)

# Example 3: Using Anthropic Claude model
Sys.setenv(ANTHROPIC_API_KEY = "your-anthropic-api-key")

claude_annotations <- annotate_cell_types(
  input = all.markers,
  tissue_name = 'human PBMC',
  model = 'claude-3-opus',
  api_key = Sys.getenv("ANTHROPIC_API_KEY"),
  top_gene_count = 15
)

# Example 4: Using OpenRouter to access multiple models
Sys.setenv(OPENROUTER_API_KEY = "your-openrouter-api-key")

# Access OpenAI models through OpenRouter
openrouter_gpt4_annotations <- annotate_cell_types(
  input = all.markers,
  tissue_name = 'human PBMC',
  model = 'openai/gpt-4o',  # Note the provider/model format
  api_key = Sys.getenv("OPENROUTER_API_KEY"),
  top_gene_count = 15
)

# Access Anthropic models through OpenRouter
openrouter_claude_annotations <- annotate_cell_types(
  input = all.markers,
  tissue_name = 'human PBMC',
  model = 'anthropic/claude-3-opus',  # Note the provider/model format
  api_key = Sys.getenv("OPENROUTER_API_KEY"),
  top_gene_count = 15
)

# Example 5: Using with mouse brain data
mouse_annotations <- annotate_cell_types(
  input = mouse_markers,  # Your mouse marker genes
  tissue_name = 'mouse brain',  # Specify correct tissue for context
  model = 'gpt-4o',
  api_key = Sys.getenv("OPENAI_API_KEY"),
  top_gene_count = 20,  # Use more genes for complex tissues
  debug = TRUE  # Enable debug output
)
}

}
\seealso{
\itemize{
\item \code{\link[Seurat:FindAllMarkers]{Seurat::FindAllMarkers()}}
\item \code{\link[=get_provider]{get_provider()}}
\item \code{\link[=process_openai]{process_openai()}}
}
}
